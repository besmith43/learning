<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Kubectl</name>
    </assembly>
    <members>
        <member name="T:Cake.Kubectl.KubectlAliases">
            <summary>
            Contains functionality for working with Kubectl commands.
            </summary>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAnnotate(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAnnotateSettings)">
             <summary>
             Update the annotations on one or more resources
            
             
              All Kubectl objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.
             
              Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAnnotateWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAnnotateSettings)">
             <summary>
             Update the annotations on one or more resources
            
             
              All Kubectl objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.
             
              Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApiResources(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApiResourcesSettings)">
             <summary>
             Print the supported API resources on the server
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApiResourcesWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApiResourcesSettings)">
             <summary>
             Print the supported API resources on the server
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApiVersions(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApiVersionsSettings)">
             <summary>
             Print the supported API versions on the server, in the form of "group/version"
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApiVersionsWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApiVersionsSettings)">
             <summary>
             Print the supported API versions on the server, in the form of "group/version"
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApplyEditLastApplied(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplyEditLastAppliedSettings)">
             <summary>
             Edit the latest last-applied-configuration annotations of resources from the default editor.
            
             
              The edit-last-applied command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources.
             
              The default format is YAML. To edit in JSON, specify "-o json".
             
              The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.
             
              In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApplyEditLastAppliedWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplyEditLastAppliedSettings)">
             <summary>
             Edit the latest last-applied-configuration annotations of resources from the default editor.
            
             
              The edit-last-applied command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources.
             
              The default format is YAML. To edit in JSON, specify "-o json".
             
              The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.
             
              In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApply(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplySettings)">
             <summary>
             Apply a configuration to a resource by filename or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.
            
             
              JSON and YAML formats are accepted.
             
              Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApplyWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplySettings)">
             <summary>
             Apply a configuration to a resource by filename or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.
            
             
              JSON and YAML formats are accepted.
             
              Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cake.Kubectl.KubectlAliases.KubectlApplySetLastApplied(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplySetLastAppliedSettings)" -->
        <!-- Badly formed XML comment ignored for member "M:Cake.Kubectl.KubectlAliases.KubectlApplySetLastAppliedWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplySetLastAppliedSettings)" -->
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApplyViewLastApplied(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplyViewLastAppliedSettings)">
             <summary>
             View the latest last-applied-configuration annotations by type/name or file.
            
             
              The default output will be printed to stdout in YAML format. One can use -o option to change output format.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlApplyViewLastAppliedWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlApplyViewLastAppliedSettings)">
             <summary>
             View the latest last-applied-configuration annotations by type/name or file.
            
             
              The default output will be printed to stdout in YAML format. One can use -o option to change output format.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAttach(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAttachSettings)">
             <summary>
             Attach to a process that is already running inside an existing container.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAttachWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAttachSettings)">
             <summary>
             Attach to a process that is already running inside an existing container.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAuthCanI(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAuthCanISettings)">
             <summary>
             Check whether an action is allowed.
            
             
              VERB is a logical Kubectl API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubectl resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL starts with "/". NAME is the name of a particular Kubectl resource.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAuthCanIWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAuthCanISettings)">
             <summary>
             Check whether an action is allowed.
            
             
              VERB is a logical Kubectl API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubectl resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL starts with "/". NAME is the name of a particular Kubectl resource.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAuth(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAuthSettings)">
             <summary>
             Inspect authorization
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAuthWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAuthSettings)">
             <summary>
             Inspect authorization
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAuthReconcile(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAuthReconcileSettings)">
             <summary>
             Reconciles rules for RBAC Role, RoleBinding, ClusterRole, and ClusterRole binding objects.
            
             
              Missing objects are created, and the containing namespace is created for namespaced objects, if required.
             
              Existing roles are updated to include the permissions in the input objects, and remove extra permissions if --remove-extra-permissions is specified.
             
              Existing bindings are updated to include the subjects in the input objects, and remove extra subjects if --remove-extra-subjects is specified.
             
              This is preferred to 'apply' for RBAC resources so that semantically-aware merging of rules and subjects is done.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAuthReconcileWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAuthReconcileSettings)">
             <summary>
             Reconciles rules for RBAC Role, RoleBinding, ClusterRole, and ClusterRole binding objects.
            
             
              Missing objects are created, and the containing namespace is created for namespaced objects, if required.
             
              Existing roles are updated to include the permissions in the input objects, and remove extra permissions if --remove-extra-permissions is specified.
             
              Existing bindings are updated to include the subjects in the input objects, and remove extra subjects if --remove-extra-subjects is specified.
             
              This is preferred to 'apply' for RBAC resources so that semantically-aware merging of rules and subjects is done.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAutoscale(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAutoscaleSettings)">
             <summary>
             Creates an autoscaler that automatically chooses and sets the number of pods that run in a kubernetes cluster.
            
             
              Looks up a Deployment, ReplicaSet, StatefulSet, or ReplicationController by name and creates an autoscaler that uses the given resource as a reference. An autoscaler can automatically increase or decrease number of pods deployed within the system as needed.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlAutoscaleWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlAutoscaleSettings)">
             <summary>
             Creates an autoscaler that automatically chooses and sets the number of pods that run in a kubernetes cluster.
            
             
              Looks up a Deployment, ReplicaSet, StatefulSet, or ReplicationController by name and creates an autoscaler that uses the given resource as a reference. An autoscaler can automatically increase or decrease number of pods deployed within the system as needed.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCertificateApprove(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCertificateApproveSettings)">
             <summary>
             Approve a certificate signing request.
            
             
              kubectl certificate approve allows a cluster admin to approve a certificate signing request (CSR). This action tells a certificate signing controller to issue a certificate to the requestor with the attributes requested in the CSR.
             
              SECURITY NOTICE: Depending on the requested attributes, the issued certificate can potentially grant a requester access to cluster resources or to authenticate as a requested identity. Before approving a CSR, ensure you understand what the signed certificate can do.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCertificateApproveWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCertificateApproveSettings)">
             <summary>
             Approve a certificate signing request.
            
             
              kubectl certificate approve allows a cluster admin to approve a certificate signing request (CSR). This action tells a certificate signing controller to issue a certificate to the requestor with the attributes requested in the CSR.
             
              SECURITY NOTICE: Depending on the requested attributes, the issued certificate can potentially grant a requester access to cluster resources or to authenticate as a requested identity. Before approving a CSR, ensure you understand what the signed certificate can do.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCertificateDeny(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCertificateDenySettings)">
             <summary>
             Deny a certificate signing request.
            
             
              kubectl certificate deny allows a cluster admin to deny a certificate signing request (CSR). This action tells a certificate signing controller to not to issue a certificate to the requestor.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCertificateDenyWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCertificateDenySettings)">
             <summary>
             Deny a certificate signing request.
            
             
              kubectl certificate deny allows a cluster admin to deny a certificate signing request (CSR). This action tells a certificate signing controller to not to issue a certificate to the requestor.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCertificate(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCertificateSettings)">
             <summary>
             Modify certificate resources.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCertificateWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCertificateSettings)">
             <summary>
             Modify certificate resources.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlClusterInfoDump(Cake.Core.ICakeContext,Cake.Kubectl.KubectlClusterInfoDumpSettings)">
             <summary>
             Dumps cluster info out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, kubernetes will build a set of files in that directory.  By default only dumps things in the 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.
            
             
              The command also dumps the logs of all of the pods in the cluster, these logs are dumped into different directories based on namespace and pod name.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlClusterInfoDumpWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlClusterInfoDumpSettings)">
             <summary>
             Dumps cluster info out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, kubernetes will build a set of files in that directory.  By default only dumps things in the 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.
            
             
              The command also dumps the logs of all of the pods in the cluster, these logs are dumped into different directories based on namespace and pod name.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlClusterInfo(Cake.Core.ICakeContext,Cake.Kubectl.KubectlClusterInfoSettings)">
             <summary>
             Display addresses of the master and services with label kubernetes.io/cluster-service=true To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlClusterInfoWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlClusterInfoSettings)">
             <summary>
             Display addresses of the master and services with label kubernetes.io/cluster-service=true To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCompletion(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCompletionSettings)">
             <summary>
             Output shell completion code for the specified shell (bash or zsh). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.
            
             
              Detailed instructions on how to do this are available here: https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion
             
              Note for zsh users: [1] zsh completions are only supported in versions of zsh >= 5.2
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCompletionWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCompletionSettings)">
             <summary>
             Output shell completion code for the specified shell (bash or zsh). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.
            
             
              Detailed instructions on how to do this are available here: https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion
             
              Note for zsh users: [1] zsh completions are only supported in versions of zsh >= 5.2
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigCurrentContext(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigCurrentContextSettings)">
             <summary>
             Displays the current-context
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigCurrentContextWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigCurrentContextSettings)">
             <summary>
             Displays the current-context
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigDeleteCluster(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigDeleteClusterSettings)">
             <summary>
             Delete the specified cluster from the kubeconfig
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigDeleteClusterWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigDeleteClusterSettings)">
             <summary>
             Delete the specified cluster from the kubeconfig
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigDeleteContext(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigDeleteContextSettings)">
             <summary>
             Delete the specified context from the kubeconfig
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigDeleteContextWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigDeleteContextSettings)">
             <summary>
             Delete the specified context from the kubeconfig
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigGetClusters(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigGetClustersSettings)">
             <summary>
             Display clusters defined in the kubeconfig.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigGetClustersWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigGetClustersSettings)">
             <summary>
             Display clusters defined in the kubeconfig.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigGetContexts(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigGetContextsSettings)">
             <summary>
             Displays one or many contexts from the kubeconfig file.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigGetContextsWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigGetContextsSettings)">
             <summary>
             Displays one or many contexts from the kubeconfig file.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfig(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSettings)">
             <summary>
             Modify kubeconfig files using subcommands like "kubectl config set current-context my-context"
            
             
              The loading order follows these rules:
             
               1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes place.
               2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the last file in the list.
               3.  Otherwise, ${HOME}/.kube/config is used and no merging takes place.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSettings)">
             <summary>
             Modify kubeconfig files using subcommands like "kubectl config set current-context my-context"
            
             
              The loading order follows these rules:
             
               1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes place.
               2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the last file in the list.
               3.  Otherwise, ${HOME}/.kube/config is used and no merging takes place.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigRenameContext(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigRenameContextSettings)">
             <summary>
             Renames a context from the kubeconfig file.
            
             
              CONTEXT_NAME is the context name that you wish change.
             
              NEW_NAME is the new name you wish to set.
             
              Note: In case the context being renamed is the 'current-context', this field will also be updated.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigRenameContextWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigRenameContextSettings)">
             <summary>
             Renames a context from the kubeconfig file.
            
             
              CONTEXT_NAME is the context name that you wish change.
             
              NEW_NAME is the new name you wish to set.
             
              Note: In case the context being renamed is the 'current-context', this field will also be updated.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetCluster(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetClusterSettings)">
             <summary>
             Sets a cluster entry in kubeconfig.
            
             
              Specifying a name that already exists will merge new fields on top of existing values for those fields.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetClusterWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetClusterSettings)">
             <summary>
             Sets a cluster entry in kubeconfig.
            
             
              Specifying a name that already exists will merge new fields on top of existing values for those fields.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetContext(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetContextSettings)">
             <summary>
             Sets a context entry in kubeconfig
            
             
              Specifying a name that already exists will merge new fields on top of existing values for those fields.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetContextWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetContextSettings)">
             <summary>
             Sets a context entry in kubeconfig
            
             
              Specifying a name that already exists will merge new fields on top of existing values for those fields.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetCredentials(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetCredentialsSettings)">
             <summary>
             Sets a user entry in kubeconfig
            
             
              Specifying a name that already exists will merge new fields on top of existing values.
             
               Client-certificate flags:
               --client-certificate=certfile --client-key=keyfile
             
               Bearer token flags:
                 --token=bearer_token
             
               Basic auth flags:
                 --username=basic_user --password=basic_password
             
              Bearer token and basic auth are mutually exclusive.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetCredentialsWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetCredentialsSettings)">
             <summary>
             Sets a user entry in kubeconfig
            
             
              Specifying a name that already exists will merge new fields on top of existing values.
             
               Client-certificate flags:
               --client-certificate=certfile --client-key=keyfile
             
               Bearer token flags:
                 --token=bearer_token
             
               Basic auth flags:
                 --username=basic_user --password=basic_password
             
              Bearer token and basic auth are mutually exclusive.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSet(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetSettings)">
             <summary>
             Sets an individual value in a kubeconfig file
            
             
              PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.
             
              PROPERTY_VALUE is the new value you wish to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.
             
              Specifying a attribute name that already exists will merge new fields on top of existing values.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigSetWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigSetSettings)">
             <summary>
             Sets an individual value in a kubeconfig file
            
             
              PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.
             
              PROPERTY_VALUE is the new value you wish to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.
             
              Specifying a attribute name that already exists will merge new fields on top of existing values.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigUnset(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigUnsetSettings)">
             <summary>
             Unsets an individual value in a kubeconfig file
            
             
              PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigUnsetWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigUnsetSettings)">
             <summary>
             Unsets an individual value in a kubeconfig file
            
             
              PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigUseContext(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigUseContextSettings)">
             <summary>
             Sets the current-context in a kubeconfig file
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigUseContextWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigUseContextSettings)">
             <summary>
             Sets the current-context in a kubeconfig file
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigView(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigViewSettings)">
             <summary>
             Display merged kubeconfig settings or a specified kubeconfig file.
            
             
              You can use --output jsonpath={...} to extract specific values using a jsonpath expression.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConfigViewWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConfigViewSettings)">
             <summary>
             Display merged kubeconfig settings or a specified kubeconfig file.
            
             
              You can use --output jsonpath={...} to extract specific values using a jsonpath expression.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConvert(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConvertSettings)">
             <summary>
             Convert config files between different API versions. Both YAML and JSON formats are accepted.
            
             
              The command takes filename, directory, or URL as input, and convert it into format of version specified by --output-version flag. If target version is not specified or not supported, convert to latest version.
             
              The default output will be printed to stdout in YAML format. One can use -o option to change to output destination.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlConvertWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlConvertSettings)">
             <summary>
             Convert config files between different API versions. Both YAML and JSON formats are accepted.
            
             
              The command takes filename, directory, or URL as input, and convert it into format of version specified by --output-version flag. If target version is not specified or not supported, convert to latest version.
             
              The default output will be printed to stdout in YAML format. One can use -o option to change to output destination.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCordon(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCordonSettings)">
             <summary>
             Mark node as unschedulable.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCordonWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCordonSettings)">
             <summary>
             Mark node as unschedulable.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCp(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCpSettings)">
             <summary>
             Copy files and directories to and from containers.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCpWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCpSettings)">
             <summary>
             Copy files and directories to and from containers.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateClusterrolebinding(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateClusterrolebindingSettings)">
             <summary>
             Create a ClusterRoleBinding for a particular ClusterRole.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateClusterrolebindingWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateClusterrolebindingSettings)">
             <summary>
             Create a ClusterRoleBinding for a particular ClusterRole.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateClusterrole(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateClusterroleSettings)">
             <summary>
             Create a ClusterRole.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateClusterroleWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateClusterroleSettings)">
             <summary>
             Create a ClusterRole.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateConfigmap(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateConfigmapSettings)">
             <summary>
             Create a configmap based on a file, directory, or specified literal value.
            
             
              A single configmap may package one or more key/value pairs.
             
              When creating a configmap based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.
             
              When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be packaged into the configmap.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateConfigmapWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateConfigmapSettings)">
             <summary>
             Create a configmap based on a file, directory, or specified literal value.
            
             
              A single configmap may package one or more key/value pairs.
             
              When creating a configmap based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.
             
              When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be packaged into the configmap.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateCronjob(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateCronjobSettings)">
             <summary>
             Create a cronjob with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateCronjobWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateCronjobSettings)">
             <summary>
             Create a cronjob with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateDeployment(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateDeploymentSettings)">
             <summary>
             Create a deployment with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateDeploymentWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateDeploymentSettings)">
             <summary>
             Create a deployment with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateJob(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateJobSettings)">
             <summary>
             Create a job with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateJobWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateJobSettings)">
             <summary>
             Create a job with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreate(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSettings)">
             <summary>
             Create a resource from a file or from stdin.
            
             
              JSON and YAML formats are accepted.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSettings)">
             <summary>
             Create a resource from a file or from stdin.
            
             
              JSON and YAML formats are accepted.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateNamespace(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateNamespaceSettings)">
             <summary>
             Create a namespace with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateNamespaceWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateNamespaceSettings)">
             <summary>
             Create a namespace with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreatePoddisruptionbudget(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings)">
             <summary>
             Create a pod disruption budget with the specified name, selector, and desired minimum available pods
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreatePoddisruptionbudgetWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings)">
             <summary>
             Create a pod disruption budget with the specified name, selector, and desired minimum available pods
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreatePriorityclass(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreatePriorityclassSettings)">
             <summary>
             Create a priorityclass with the specified name, value, globalDefault and description
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreatePriorityclassWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreatePriorityclassSettings)">
             <summary>
             Create a priorityclass with the specified name, value, globalDefault and description
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateQuota(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateQuotaSettings)">
             <summary>
             Create a resourcequota with the specified name, hard limits and optional scopes
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateQuotaWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateQuotaSettings)">
             <summary>
             Create a resourcequota with the specified name, hard limits and optional scopes
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateRolebinding(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateRolebindingSettings)">
             <summary>
             Create a RoleBinding for a particular Role or ClusterRole.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateRolebindingWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateRolebindingSettings)">
             <summary>
             Create a RoleBinding for a particular Role or ClusterRole.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateRole(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateRoleSettings)">
             <summary>
             Create a role with single rule.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateRoleWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateRoleSettings)">
             <summary>
             Create a role with single rule.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretDockerRegistry(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings)">
             <summary>
             Create a new secret for use with Docker registries.
            
             
               Dockercfg secrets are used to authenticate against Docker registries.
             
               When using the Docker command line to push images, you can authenticate to a given registry by running:
                   '$ docker login DOCKER_REGISTRY_SERVER --username=DOCKER_USER --password=DOCKER_PASSWORD --email=DOCKER_EMAIL'.
             
              That produces a ~/.dockercfg file that is used by subsequent 'docker push' and 'docker pull' commands to authenticate to the registry. The email address is optional.
             
               When creating applications, you may have a Docker registry that requires authentication.  In order for the
               nodes to pull images on your behalf, they have to have the credentials.  You can provide this information
               by creating a dockercfg secret and attaching it to your service account.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretDockerRegistryWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings)">
             <summary>
             Create a new secret for use with Docker registries.
            
             
               Dockercfg secrets are used to authenticate against Docker registries.
             
               When using the Docker command line to push images, you can authenticate to a given registry by running:
                   '$ docker login DOCKER_REGISTRY_SERVER --username=DOCKER_USER --password=DOCKER_PASSWORD --email=DOCKER_EMAIL'.
             
              That produces a ~/.dockercfg file that is used by subsequent 'docker push' and 'docker pull' commands to authenticate to the registry. The email address is optional.
             
               When creating applications, you may have a Docker registry that requires authentication.  In order for the
               nodes to pull images on your behalf, they have to have the credentials.  You can provide this information
               by creating a dockercfg secret and attaching it to your service account.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretGeneric(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretGenericSettings)">
             <summary>
             Create a secret based on a file, directory, or specified literal value.
            
             
              A single secret may package one or more key/value pairs.
             
              When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.
             
              When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretGenericWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretGenericSettings)">
             <summary>
             Create a secret based on a file, directory, or specified literal value.
            
             
              A single secret may package one or more key/value pairs.
             
              When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.
             
              When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecret(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretSettings)">
             <summary>
             Create a secret using specified subcommand.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretSettings)">
             <summary>
             Create a secret using specified subcommand.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretTls(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretTlsSettings)">
             <summary>
             Create a TLS secret from the given public/private key pair.
            
             
              The public/private key pair must exist before hand. The public key certificate must be .PEM encoded and match the given private key.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateSecretTlsWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateSecretTlsSettings)">
             <summary>
             Create a TLS secret from the given public/private key pair.
            
             
              The public/private key pair must exist before hand. The public key certificate must be .PEM encoded and match the given private key.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceaccount(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceaccountSettings)">
             <summary>
             Create a service account with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceaccountWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceaccountSettings)">
             <summary>
             Create a service account with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceClusterip(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceClusteripSettings)">
             <summary>
             Create a ClusterIP service with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceClusteripWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceClusteripSettings)">
             <summary>
             Create a ClusterIP service with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceExternalname(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceExternalnameSettings)">
             <summary>
             Create an ExternalName service with the specified name.
            
             
              ExternalName service references to an external DNS address instead of only pods, which will allow application authors to reference services that exist off platform, on other clusters, or locally.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceExternalnameWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceExternalnameSettings)">
             <summary>
             Create an ExternalName service with the specified name.
            
             
              ExternalName service references to an external DNS address instead of only pods, which will allow application authors to reference services that exist off platform, on other clusters, or locally.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateService(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceSettings)">
             <summary>
             Create a service using specified subcommand.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceSettings)">
             <summary>
             Create a service using specified subcommand.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceLoadbalancer(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings)">
             <summary>
             Create a LoadBalancer service with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceLoadbalancerWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings)">
             <summary>
             Create a LoadBalancer service with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceNodeport(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceNodeportSettings)">
             <summary>
             Create a NodePort service with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlCreateServiceNodeportWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlCreateServiceNodeportSettings)">
             <summary>
             Create a NodePort service with the specified name.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDelete(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDeleteSettings)">
             <summary>
             Delete resources by filenames, stdin, resources and names, or by resources and label selector.
            
             
              JSON and YAML formats are accepted. Only one type of the arguments may be specified: filenames, resources and names, or resources and label selector.
             
              Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must pass a grace period of 0 and specify the --force flag.
             
              IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.
             
              Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDeleteWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDeleteSettings)">
             <summary>
             Delete resources by filenames, stdin, resources and names, or by resources and label selector.
            
             
              JSON and YAML formats are accepted. Only one type of the arguments may be specified: filenames, resources and names, or resources and label selector.
             
              Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must pass a grace period of 0 and specify the --force flag.
             
              IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.
             
              Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDescribe(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDescribeSettings)">
             <summary>
             Show details of a specific resource or group of resources
            
             
              Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:
             
               $ kubectl describe TYPE NAME_PREFIX
             
              will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDescribeWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDescribeSettings)">
             <summary>
             Show details of a specific resource or group of resources
            
             
              Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:
             
               $ kubectl describe TYPE NAME_PREFIX
             
              will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDiff(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDiffSettings)">
             <summary>
             Diff configurations specified by filename or stdin between the current online configuration, and the configuration as it would be if applied.
            
             
              Output is always YAML.
             
              KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff command. By default, the "diff" command available in your path will be run with "-u" (unicode) and "-N" (treat new files as empty) options.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDiffWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDiffSettings)">
             <summary>
             Diff configurations specified by filename or stdin between the current online configuration, and the configuration as it would be if applied.
            
             
              Output is always YAML.
             
              KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff command. By default, the "diff" command available in your path will be run with "-u" (unicode) and "-N" (treat new files as empty) options.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDrain(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDrainSettings)">
             <summary>
             Drain node in preparation for maintenance.
            
             
              The given node will be marked unschedulable to prevent new pods from arriving. 'drain' evicts the pods if the APIServer supportshttp://kubernetes.io/docs/admin/disruptions/ . Otherwise, it will use normal DELETE to delete the pods. The 'drain' evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are DaemonSet-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any DaemonSet-managed pods, because those pods would be immediately replaced by the DaemonSet controller, which ignores unschedulable markings.  If there are any pods that are neither mirror pods nor managed by ReplicationController, ReplicaSet, DaemonSet, StatefulSet or Job, then drain will not delete any pods unless you use --force.  --force will also allow deletion to proceed if the managing resource of one or more pods is missing.
             
              'drain' waits for graceful termination. You should not operate on the machine until the command completes.
             
              When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again.
             
              http://kubernetes.io/images/docs/kubectl_drain.svg
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlDrainWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlDrainSettings)">
             <summary>
             Drain node in preparation for maintenance.
            
             
              The given node will be marked unschedulable to prevent new pods from arriving. 'drain' evicts the pods if the APIServer supportshttp://kubernetes.io/docs/admin/disruptions/ . Otherwise, it will use normal DELETE to delete the pods. The 'drain' evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are DaemonSet-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any DaemonSet-managed pods, because those pods would be immediately replaced by the DaemonSet controller, which ignores unschedulable markings.  If there are any pods that are neither mirror pods nor managed by ReplicationController, ReplicaSet, DaemonSet, StatefulSet or Job, then drain will not delete any pods unless you use --force.  --force will also allow deletion to proceed if the managing resource of one or more pods is missing.
             
              'drain' waits for graceful termination. You should not operate on the machine until the command completes.
             
              When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again.
             
              http://kubernetes.io/images/docs/kubectl_drain.svg
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlEdit(Cake.Core.ICakeContext,Cake.Kubectl.KubectlEditSettings)">
             <summary>
             Edit a resource from the default editor.
            
             
              The edit command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources.
             
              Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.
             
              The default format is YAML. To edit in JSON, specify "-o json".
             
              The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.
             
              In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlEditWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlEditSettings)">
             <summary>
             Edit a resource from the default editor.
            
             
              The edit command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources.
             
              Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.
             
              The default format is YAML. To edit in JSON, specify "-o json".
             
              The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.
             
              In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlExec(Cake.Core.ICakeContext,Cake.Kubectl.KubectlExecSettings)">
             <summary>
             Execute a command in a container.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlExecWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlExecSettings)">
             <summary>
             Execute a command in a container.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cake.Kubectl.KubectlAliases.KubectlExplain(Cake.Core.ICakeContext,Cake.Kubectl.KubectlExplainSettings)" -->
        <!-- Badly formed XML comment ignored for member "M:Cake.Kubectl.KubectlAliases.KubectlExplainWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlExplainSettings)" -->
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlExpose(Cake.Core.ICakeContext,Cake.Kubectl.KubectlExposeSettings)">
             <summary>
             Expose a resource as a new Kubectl service.
            
             
              Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.
             
              Possible resources include (case insensitive):
             
              pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlExposeWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlExposeSettings)">
             <summary>
             Expose a resource as a new Kubectl service.
            
             
              Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.
             
              Possible resources include (case insensitive):
             
              pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlGet(Cake.Core.ICakeContext,Cake.Kubectl.KubectlGetSettings)">
             <summary>
             Display one or many resources
            
             
              Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.
             
              Uninitialized objects are not shown unless --include-uninitialized is passed.
             
              By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlGetWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlGetSettings)">
             <summary>
             Display one or many resources
            
             
              Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.
             
              Uninitialized objects are not shown unless --include-uninitialized is passed.
             
              By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlKustomize(Cake.Core.ICakeContext,Cake.Kubectl.KubectlKustomizeSettings)">
             <summary>
             Print a set of API resources generated from instructions in a kustomization.yaml file.
            
             
              The argument must be the path to the directory containing the file, or a git repository URL with a path suffix specifying same with respect to the repository root.
             
              kubectl kustomize somedir
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlKustomizeWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlKustomizeSettings)">
             <summary>
             Print a set of API resources generated from instructions in a kustomization.yaml file.
            
             
              The argument must be the path to the directory containing the file, or a git repository URL with a path suffix specifying same with respect to the repository root.
             
              kubectl kustomize somedir
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlLabel(Cake.Core.ICakeContext,Cake.Kubectl.KubectlLabelSettings)">
             <summary>
             Update the labels on a resource.
            
             
               *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.
               *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
               *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.
               *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlLabelWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlLabelSettings)">
             <summary>
             Update the labels on a resource.
            
             
               *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.
               *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
               *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.
               *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlLogs(Cake.Core.ICakeContext,Cake.Kubectl.KubectlLogsSettings)">
             <summary>
             Print the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlLogsWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlLogsSettings)">
             <summary>
             Print the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPatch(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPatchSettings)">
             <summary>
             Update field(s) of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.
            
             
              JSON and YAML formats are accepted.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPatchWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPatchSettings)">
             <summary>
             Update field(s) of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.
            
             
              JSON and YAML formats are accepted.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPlugin(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPluginSettings)">
             <summary>
             Provides utilities for interacting with plugins.
            
             
              Plugins provide extended functionality that is not part of the major command-line distribution. Please refer to the documentation and examples for more information about how write your own plugins.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPluginWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPluginSettings)">
             <summary>
             Provides utilities for interacting with plugins.
            
             
              Plugins provide extended functionality that is not part of the major command-line distribution. Please refer to the documentation and examples for more information about how write your own plugins.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPluginList(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPluginListSettings)">
             <summary>
             List all available plugin files on a user's PATH.
            
             
              Available plugin files are those that are: - executable - anywhere on the user's PATH - begin with "kubectl-"
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPluginListWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPluginListSettings)">
             <summary>
             List all available plugin files on a user's PATH.
            
             
              Available plugin files are those that are: - executable - anywhere on the user's PATH - begin with "kubectl-"
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPortForward(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPortForwardSettings)">
             <summary>
             Forward one or more local ports to a pod. This command requires the node to have 'socat' installed.
            
             
              Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.
             
              If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and rerun of the command is needed to resume forwarding.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlPortForwardWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlPortForwardSettings)">
             <summary>
             Forward one or more local ports to a pod. This command requires the node to have 'socat' installed.
            
             
              Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.
             
              If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and rerun of the command is needed to resume forwarding.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlProxy(Cake.Core.ICakeContext,Cake.Kubectl.KubectlProxySettings)">
             <summary>
             Creates a proxy server or application-level gateway between localhost and the Kubectl API Server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote kubernetes API Server port, except for the path matching the static content path.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlProxyWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlProxySettings)">
             <summary>
             Creates a proxy server or application-level gateway between localhost and the Kubectl API Server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote kubernetes API Server port, except for the path matching the static content path.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlReplace(Cake.Core.ICakeContext,Cake.Kubectl.KubectlReplaceSettings)">
             <summary>
             Replace a resource by filename or stdin.
            
             
              JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by
             
               $ kubectl get TYPE NAME -o yaml
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlReplaceWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlReplaceSettings)">
             <summary>
             Replace a resource by filename or stdin.
            
             
              JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by
             
               $ kubectl get TYPE NAME -o yaml
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutHistory(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutHistorySettings)">
             <summary>
             View previous rollout revisions and configurations.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutHistoryWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutHistorySettings)">
             <summary>
             View previous rollout revisions and configurations.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRollout(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutSettings)">
             <summary>
             Manage the rollout of a resource.
            
             
              Valid resource types include:
             
               *  deployments
               *  daemonsets
               *  statefulsets
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutSettings)">
             <summary>
             Manage the rollout of a resource.
            
             
              Valid resource types include:
             
               *  deployments
               *  daemonsets
               *  statefulsets
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutPause(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutPauseSettings)">
             <summary>
             Mark the provided resource as paused
            
             
              Paused resources will not be reconciled by a controller. Use "kubectl rollout resume" to resume a paused resource. Currently only deployments support being paused.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutPauseWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutPauseSettings)">
             <summary>
             Mark the provided resource as paused
            
             
              Paused resources will not be reconciled by a controller. Use "kubectl rollout resume" to resume a paused resource. Currently only deployments support being paused.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutResume(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutResumeSettings)">
             <summary>
             Resume a paused resource
            
             
              Paused resources will not be reconciled by a controller. By resuming a resource, we allow it to be reconciled again. Currently only deployments support being resumed.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutResumeWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutResumeSettings)">
             <summary>
             Resume a paused resource
            
             
              Paused resources will not be reconciled by a controller. By resuming a resource, we allow it to be reconciled again. Currently only deployments support being resumed.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutStatus(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutStatusSettings)">
             <summary>
             Show the status of the rollout.
            
             
              By default 'rollout status' will watch the status of the latest rollout until it's done. If you don't want to wait for the rollout to finish then you can use --watch=false. Note that if a new rollout starts in-between, then 'rollout status' will continue watching the latest revision. If you want to pin to a specific revision and abort if it is rolled over by another revision, use --revision=N where N is the revision you need to watch for.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutStatusWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutStatusSettings)">
             <summary>
             Show the status of the rollout.
            
             
              By default 'rollout status' will watch the status of the latest rollout until it's done. If you don't want to wait for the rollout to finish then you can use --watch=false. Note that if a new rollout starts in-between, then 'rollout status' will continue watching the latest revision. If you want to pin to a specific revision and abort if it is rolled over by another revision, use --revision=N where N is the revision you need to watch for.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutUndo(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutUndoSettings)">
             <summary>
             Rollback to a previous rollout.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRolloutUndoWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRolloutUndoSettings)">
             <summary>
             Rollback to a previous rollout.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRun(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRunSettings)">
             <summary>
             Create and run a particular image, possibly replicated.
            
             
              Creates a deployment or job to manage the created container(s).
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlRunWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlRunSettings)">
             <summary>
             Create and run a particular image, possibly replicated.
            
             
              Creates a deployment or job to manage the created container(s).
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlScale(Cake.Core.ICakeContext,Cake.Kubectl.KubectlScaleSettings)">
             <summary>
             Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet.
            
             
              Scale also allows users to specify one or more preconditions for the scale action.
             
              If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlScaleWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlScaleSettings)">
             <summary>
             Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet.
            
             
              Scale also allows users to specify one or more preconditions for the scale action.
             
              If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetEnv(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetEnvSettings)">
             <summary>
             Update environment variables on a pod template.
            
             
              List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.
             
              If "--env -" is passed, environment variables can be read from STDIN using the standard env syntax.
             
              Possible resources include (case insensitive):
             
               pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs)
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetEnvWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetEnvSettings)">
             <summary>
             Update environment variables on a pod template.
            
             
              List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.
             
              If "--env -" is passed, environment variables can be read from STDIN using the standard env syntax.
             
              Possible resources include (case insensitive):
             
               pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs)
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetImage(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetImageSettings)">
             <summary>
             Update existing container image(s) of resources.
            
             
              Possible resources include (case insensitive):
             
               pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), replicaset (rs)
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetImageWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetImageSettings)">
             <summary>
             Update existing container image(s) of resources.
            
             
              Possible resources include (case insensitive):
             
               pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), replicaset (rs)
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSet(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetSettings)">
             <summary>
             Configure application resources
            
             
              These commands help you make changes to existing application resources.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetSettings)">
             <summary>
             Configure application resources
            
             
              These commands help you make changes to existing application resources.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetResources(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetResourcesSettings)">
             <summary>
             Specify compute resource requirements (cpu, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.
            
             
              for each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.
             
              Possible resources include (case insensitive): Use "kubectl api-resources" for a complete list of supported resources..
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetResourcesWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetResourcesSettings)">
             <summary>
             Specify compute resource requirements (cpu, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.
            
             
              for each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.
             
              Possible resources include (case insensitive): Use "kubectl api-resources" for a complete list of supported resources..
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetSelector(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetSelectorSettings)">
             <summary>
             Set the selector on a resource. Note that the new selector will overwrite the old selector if the resource had one prior to the invocation of 'set selector'.
            
             
              A selector must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used. Note: currently selectors can only be set on Service objects.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetSelectorWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetSelectorSettings)">
             <summary>
             Set the selector on a resource. Note that the new selector will overwrite the old selector if the resource had one prior to the invocation of 'set selector'.
            
             
              A selector must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used. Note: currently selectors can only be set on Service objects.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetServiceaccount(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetServiceaccountSettings)">
             <summary>
             Update ServiceAccount of pod template resources.
            
             
              Possible resources (case insensitive) can be:
             
              replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs), statefulset
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetServiceaccountWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetServiceaccountSettings)">
             <summary>
             Update ServiceAccount of pod template resources.
            
             
              Possible resources (case insensitive) can be:
             
              replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs), statefulset
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetSubject(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetSubjectSettings)">
             <summary>
             Update User, Group or ServiceAccount in a RoleBinding/ClusterRoleBinding.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlSetSubjectWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlSetSubjectSettings)">
             <summary>
             Update User, Group or ServiceAccount in a RoleBinding/ClusterRoleBinding.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTaint(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTaintSettings)">
             <summary>
             Update the taints on one or more nodes.
            
             
               *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.
               *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.
               *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
               *  The value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.
               *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.
               *  Currently taint can only apply to node.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTaintWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTaintSettings)">
             <summary>
             Update the taints on one or more nodes.
            
             
               *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.
               *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.
               *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
               *  The value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.
               *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.
               *  Currently taint can only apply to node.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTop(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTopSettings)">
             <summary>
             Display Resource (CPU/Memory/Storage) usage.
            
             
              The top command allows you to see the resource consumption for nodes or pods.
             
              This command requires Heapster to be correctly configured and working on the server.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTopWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTopSettings)">
             <summary>
             Display Resource (CPU/Memory/Storage) usage.
            
             
              The top command allows you to see the resource consumption for nodes or pods.
             
              This command requires Heapster to be correctly configured and working on the server.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTopNode(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTopNodeSettings)">
             <summary>
             Display Resource (CPU/Memory/Storage) usage of nodes.
            
             
              The top-node command allows you to see the resource consumption of nodes.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTopNodeWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTopNodeSettings)">
             <summary>
             Display Resource (CPU/Memory/Storage) usage of nodes.
            
             
              The top-node command allows you to see the resource consumption of nodes.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTopPod(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTopPodSettings)">
             <summary>
             Display Resource (CPU/Memory/Storage) usage of pods.
            
             
              The 'top pod' command allows you to see the resource consumption of pods.
             
              Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlTopPodWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlTopPodSettings)">
             <summary>
             Display Resource (CPU/Memory/Storage) usage of pods.
            
             
              The 'top pod' command allows you to see the resource consumption of pods.
             
              Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlUncordon(Cake.Core.ICakeContext,Cake.Kubectl.KubectlUncordonSettings)">
             <summary>
             Mark node as schedulable.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlUncordonWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlUncordonSettings)">
             <summary>
             Mark node as schedulable.
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlVersion(Cake.Core.ICakeContext,Cake.Kubectl.KubectlVersionSettings)">
             <summary>
             Print the client and server version information for the current context
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlVersionWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlVersionSettings)">
             <summary>
             Print the client and server version information for the current context
            
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlWait(Cake.Core.ICakeContext,Cake.Kubectl.KubectlWaitSettings)">
             <summary>
             Experimental: Wait for a specific condition on one or many resources.
            
             
              The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.
             
              Alternatively, the command can wait for the given set of resources to be deleted by providing the "delete" keyword as the value to the --for flag.
             
              A successful message will be printed to stdout indicating when the specified condition has been met. One can use -o option to change to output destination.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlAliases.KubectlWaitWithResult(Cake.Core.ICakeContext,Cake.Kubectl.KubectlWaitSettings)">
             <summary>
             Experimental: Wait for a specific condition on one or many resources.
            
             
              The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.
             
              Alternatively, the command can wait for the given set of resources to be deleted by providing the "delete" keyword as the value to the --for flag.
             
              A successful message will be printed to stdout indicating when the specified condition has been met. One can use -o option to change to output destination.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <returns>Output lines.</returns>
        </member>
        <member name="T:Cake.Kubectl.KubectlAnnotateSettings">
             <summary>
             Update the annotations on one or more resources
            
             
              All Kubectl objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.
             
              Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlApiResourcesSettings">
             <summary>
             Print the supported API resources on the server
            
             </summary>
             <example>
               # Print the supported API Resources
               kubectl api-resources
             
               # Print the supported API Resources with more information
               kubectl api-resources -o wide
             
               # Print the supported namespaced resources
               kubectl api-resources --namespaced=true
             
               # Print the supported non-namespaced resources
               kubectl api-resources --namespaced=false
             
               # Print the supported API Resources with specific APIGroup
               kubectl api-resources --api-group=extensions
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlApiResourcesSettings.ApiGroup">
             <summary>
             --api-group
            
             Limit to resources in the specified API group.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApiResourcesSettings.Cached">
             <summary>
             --cached
            
             Use the cached list of resources if available.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApiResourcesSettings.Namespaced">
             <summary>
             --namespaced
            
             If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApiResourcesSettings.NoHeaders">
             <summary>
             --no-headers
            
             When using the default or custom-column output format, don't print headers (default print headers).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApiResourcesSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: wide|name.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApiResourcesSettings.Verbs">
             <summary>
             --verbs
            
             Limit to resources that support the specified verbs.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlApiVersionsSettings">
             <summary>
             Print the supported API versions on the server, in the form of "group/version"
            
             </summary>
             <example>
               # Print the supported API versions
               kubectl api-versions
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlApplyEditLastAppliedSettings">
             <summary>
             Edit the latest last-applied-configuration annotations of resources from the default editor.
            
             
              The edit-last-applied command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources.
             
              The default format is YAML. To edit in JSON, specify "-o json".
             
              The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.
             
              In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.
             </summary>
             <example>
               # Edit the last-applied-configuration annotations by type/name in YAML.
               kubectl apply edit-last-applied deployment/nginx
             
               # Edit the last-applied-configuration annotations by file in JSON.
               kubectl apply edit-last-applied -f deploy.yaml -o json
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files to use to edit the resource
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyEditLastAppliedSettings.WindowsLineEndings">
             <summary>
             --windows-line-endings
            
             Defaults to the line ending native to your platform.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlApplySettings">
             <summary>
             Apply a configuration to a resource by filename or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.
            
             
              JSON and YAML formats are accepted.
             
              Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.
             </summary>
             <example>
               # Apply the configuration in pod.json to a pod.
               kubectl apply -f ./pod.json
             
               # Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml.
               kubectl apply -k dir/
             
               # Apply the JSON passed into stdin to a pod.
               cat pod.json | kubectl apply -f -
             
               # Note: --prune is still in Alpha
               # Apply the configuration in manifest.yaml that matches label app=nginx and delete all the other resources that are not in the file and match label app=nginx.
               kubectl apply --prune -f manifest.yaml -l app=nginx
             
               # Apply the configuration in manifest.yaml and delete all the other configmaps that are not in the file.
               kubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.All">
             <summary>
             --all
            
             Select all resources in the namespace of the specified resource types.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Cascade">
             <summary>
             --cascade
            
             If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it. Warning: --dry-run cannot accurately output the result of merging the local manifest and the server-side data. Use --server-dry-run to get the merged result instead.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.ExperimentalFieldManager">
             <summary>
             --experimental-field-manager
            
             Name of the manager used to track field ownership. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.ExperimentalForceConflicts">
             <summary>
             --experimental-force-conflicts
            
             If true, server-side apply will force the changes against conflicts. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.ExperimentalServerSide">
             <summary>
             --experimental-server-side
            
             If true, apply runs in the server instead of the client. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Filename">
             <summary>
             -f, --filename
            
             that contains the configuration to apply
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Force">
             <summary>
             --force
            
             Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.GracePeriod">
             <summary>
             --grace-period
            
             Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process a kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.OpenapiPatch">
             <summary>
             --openapi-patch
            
             If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Overwrite">
             <summary>
             --overwrite
            
             Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Prune">
             <summary>
             --prune
            
             Automatically delete resource objects, including the uninitialized ones, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlApplySettings.PruneWhitelist" -->
        <member name="P:Cake.Kubectl.KubectlApplySettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.ServerDryRun">
             <summary>
             --server-dry-run
            
             If true, request will be sent to server with dry-run flag, which means the modifications won't be persisted. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySettings.Wait">
             <summary>
             --wait
            
             If true, wait for resources to be gone before returning. This waits for finalizers.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cake.Kubectl.KubectlApplySetLastAppliedSettings" -->
        <member name="P:Cake.Kubectl.KubectlApplySetLastAppliedSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySetLastAppliedSettings.CreateAnnotation">
             <summary>
             --create-annotation
            
             Will create 'last-applied-configuration' annotations if current objects doesn't have one
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySetLastAppliedSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySetLastAppliedSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files that contains the last-applied-configuration annotations
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySetLastAppliedSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplySetLastAppliedSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlApplyViewLastAppliedSettings">
             <summary>
             View the latest last-applied-configuration annotations by type/name or file.
            
             
              The default output will be printed to stdout in YAML format. One can use -o option to change output format.
             </summary>
             <example>
               # View the last-applied-configuration annotations by type/name in YAML.
               kubectl apply view-last-applied deployment/nginx
             
               # View the last-applied-configuration annotations by file in JSON
               kubectl apply view-last-applied -f deploy.yaml -o json
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyViewLastAppliedSettings.All">
             <summary>
             --all
            
             Select all resources in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyViewLastAppliedSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files that contains the last-applied-configuration annotations
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyViewLastAppliedSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyViewLastAppliedSettings.Output">
             <summary>
             -o, --output
            
             Output format. Must be one of yaml|json
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyViewLastAppliedSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlApplyViewLastAppliedSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="T:Cake.Kubectl.ArgumentsBuilderExtension">
            <summary>
            Arguments builder
            </summary>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.AppendAll``1(Cake.Core.IO.ProcessArgumentBuilder,System.String,``0,System.String[])">
            <summary>
            Appends all arguments from <paramref name="settings"/> and <paramref name="arguments"/>.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <param name="builder"></param>
            <param name="command"></param>
            <param name="settings">The settings.</param>
            <param name="arguments"></param>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.AppendArguments``1(Cake.Core.IO.ProcessArgumentBuilder,``0,System.Boolean)">
            <summary>
            Appends pre or post command arguments.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <param name="builder"></param>
            <param name="settings"></param>
            <param name="preCommand"></param>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromProperty``1(System.Reflection.PropertyInfo,``0,System.Boolean)">
            <summary>
            Gets and processes <paramref name="property"/> value from <paramref name="settings"/>.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <param name="property"></param>
            <param name="settings">The settings.</param>
            <param name="preCommand">Pre or post command.</param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromAutoProperty(Cake.Kubectl.AutoPropertyAttribute,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Uses format specified in attribute to format the argument.
            </summary>
            <param name="attribute"></param>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetAutoPropertyAttributeOrNull(System.Reflection.PropertyInfo)">
            <summary>
            Retrieve <see cref="T:Cake.Kubectl.AutoPropertyAttribute"/> from property or null if there isn't one.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromBoolProperty(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromNullableIntProperty(System.Reflection.PropertyInfo,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromNullableInt64Property(System.Reflection.PropertyInfo,System.Nullable{System.Int64})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromNullableUInt64Property(System.Reflection.PropertyInfo,System.Nullable{System.UInt64})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromNullableUInt16Property(System.Reflection.PropertyInfo,System.Nullable{System.UInt16})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromNullableBoolProperty(System.Reflection.PropertyInfo,System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromDictionaryProperty(System.Reflection.PropertyInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromStringArrayProperty(System.Reflection.PropertyInfo,System.String[])">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromStringProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetArgumentFromNullableTimeSpanProperty(System.Reflection.PropertyInfo,System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.ConvertTimeSpan(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.Kubectl.ArgumentsBuilderExtension.GetPropertyName(System.String)">
            <summary>
            Converts property name to Kubectl arguments format
            </summary>
            <param name="name"></param>
            <returns></returns>
            <example>NoForce -> no-force</example>
        </member>
        <member name="T:Cake.Kubectl.KubectlAttachSettings">
             <summary>
             Attach to a process that is already running inside an existing container.
            
             </summary>
             <example>
               # Get output from running pod 123456-7890, using the first container by default
               kubectl attach 123456-7890
             
               # Get output from ruby-container from pod 123456-7890
               kubectl attach 123456-7890 -c ruby-container
             
               # Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod 123456-7890
               # and sends stdout/stderr from 'bash' back to the client
               kubectl attach 123456-7890 -c ruby-container -i -t
             
               # Get output from the first pod of a ReplicaSet named nginx
               kubectl attach rs/nginx
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlAttachSettings.Container">
             <summary>
             -c, --container
            
             Container name. If omitted, the first container in the pod will be chosen
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAttachSettings.PodRunningTimeout">
             <summary>
             --pod-running-timeout
            
             The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAttachSettings.Stdin">
             <summary>
             -i, --stdin
            
             Pass stdin to the container
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAttachSettings.Tty">
             <summary>
             -t, --tty
            
             Stdin is a TTY
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlAuthCanISettings">
             <summary>
             Check whether an action is allowed.
            
             
              VERB is a logical Kubectl API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubectl resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL starts with "/". NAME is the name of a particular Kubectl resource.
             </summary>
             <example>
               # Check to see if I can create pods in any namespace
               kubectl auth can-i create pods --all-namespaces
             
               # Check to see if I can list deployments in my current namespace
               kubectl auth can-i list deployments.extensions
             
               # Check to see if I can do everything in my current namespace ("*" means all)
               kubectl auth can-i '*' '*'
             
               # Check to see if I can get the job named "bar" in namespace "foo"
               kubectl auth can-i list jobs.batch/bar -n foo
             
               # Check to see if I can read pod logs
               kubectl auth can-i get pods --subresource=log
             
               # Check to see if I can access the URL /logs/
               kubectl auth can-i get /logs/
             
               # List all allowed actions in namespace "foo"
               kubectl auth can-i --list --namespace=foo
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthCanISettings.AllNamespaces">
             <summary>
             -A, --all-namespaces
            
             If true, check the specified action in all namespaces.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthCanISettings.List">
             <summary>
             --list
            
             If true, prints all allowed actions.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthCanISettings.NoHeaders">
             <summary>
             --no-headers
            
             If true, prints allowed actions without headers
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthCanISettings.Quiet">
             <summary>
             -q, --quiet
            
             If true, suppress output and just return the exit code.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthCanISettings.Subresource">
             <summary>
             --subresource
            
             SubResource such as pod/log or deployment/scale
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlAuthSettings">
             <summary>
             Inspect authorization
            
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlAuthReconcileSettings">
             <summary>
             Reconciles rules for RBAC Role, RoleBinding, ClusterRole, and ClusterRole binding objects.
            
             
              Missing objects are created, and the containing namespace is created for namespaced objects, if required.
             
              Existing roles are updated to include the permissions in the input objects, and remove extra permissions if --remove-extra-permissions is specified.
             
              Existing bindings are updated to include the subjects in the input objects, and remove extra subjects if --remove-extra-subjects is specified.
             
              This is preferred to 'apply' for RBAC resources so that semantically-aware merging of rules and subjects is done.
             </summary>
             <example>
               # Reconcile rbac resources from a file
               kubectl auth reconcile -f my-rbac-rules.yaml
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.DryRun">
             <summary>
             --dry-run
            
             If true, display results but do not submit changes
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to reconcile.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.RemoveExtraPermissions">
             <summary>
             --remove-extra-permissions
            
             If true, removes extra permissions added to roles
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.RemoveExtraSubjects">
             <summary>
             --remove-extra-subjects
            
             If true, removes extra subjects added to rolebindings
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAuthReconcileSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.AutoPropertyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cake.Kubectl.AutoPropertyAttribute.Format">
            <summary>
            Format of the output, i.e. "-s {1}"
            where {0} is property name and {1} is value.
            </summary>
        </member>
        <member name="P:Cake.Kubectl.AutoPropertyAttribute.OnlyWhenTrue">
            <summary>
            Outputs only when given value is true.
            </summary>
        </member>
        <member name="P:Cake.Kubectl.AutoPropertyAttribute.PreCommand">
            <summary>
            Whether it appears before command
            </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlAutoscaleSettings">
             <summary>
             Creates an autoscaler that automatically chooses and sets the number of pods that run in a kubernetes cluster.
            
             
              Looks up a Deployment, ReplicaSet, StatefulSet, or ReplicationController by name and creates an autoscaler that uses the given resource as a reference. An autoscaler can automatically increase or decrease number of pods deployed within the system as needed.
             </summary>
             <example>
               # Auto scale a deployment "foo", with the number of pods between 2 and 10, no target CPU utilization specified so a default autoscaling policy will be used:
               kubectl autoscale deployment foo --min=2 --max=10
             
               # Auto scale a replication controller "foo", with the number of pods between 1 and 5, target CPU utilization at 80%:
               kubectl autoscale rc foo --max=5 --cpu-percent=80
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.CpuPercent">
             <summary>
             --cpu-percent
            
             The target average CPU utilization (represented as a percent of requested CPU) over all the pods. If it's not specified or negative, a default autoscaling policy will be used.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to autoscale.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use. Currently there is only 1 generator.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Max">
             <summary>
             --max
            
             The upper limit for the number of pods that can be set by the autoscaler. Required.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Min">
             <summary>
             --min
            
             The lower limit for the number of pods that can be set by the autoscaler. If it's not specified or negative, the server will apply a default value.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Name">
             <summary>
             --name
            
             The name for the newly created object. If not specified, the name of the input resource will be used.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlAutoscaleSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.AutoToolSettings">
            <summary>
            Base class for tooling that is used for autogeneration of command line arguments.
            </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCertificateApproveSettings">
             <summary>
             Approve a certificate signing request.
            
             
              kubectl certificate approve allows a cluster admin to approve a certificate signing request (CSR). This action tells a certificate signing controller to issue a certificate to the requestor with the attributes requested in the CSR.
             
              SECURITY NOTICE: Depending on the requested attributes, the issued certificate can potentially grant a requester access to cluster resources or to authenticate as a requested identity. Before approving a CSR, ensure you understand what the signed certificate can do.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to update
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.Force">
             <summary>
             --force
            
             Update the CSR even if it is already approved.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateApproveSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCertificateDenySettings">
             <summary>
             Deny a certificate signing request.
            
             
              kubectl certificate deny allows a cluster admin to deny a certificate signing request (CSR). This action tells a certificate signing controller to not to issue a certificate to the requestor.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to update
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.Force">
             <summary>
             --force
            
             Update the CSR even if it is already denied.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCertificateDenySettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCertificateSettings">
             <summary>
             Modify certificate resources.
            
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlClusterInfoDumpSettings">
             <summary>
             Dumps cluster info out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, kubernetes will build a set of files in that directory.  By default only dumps things in the 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.
            
             
              The command also dumps the logs of all of the pods in the cluster, these logs are dumped into different directories based on namespace and pod name.
             </summary>
             <example>
               # Dump current cluster state to stdout
               kubectl cluster-info dump
             
               # Dump current cluster state to /path/to/cluster-state
               kubectl cluster-info dump --output-directory=/path/to/cluster-state
             
               # Dump all namespaces to stdout
               kubectl cluster-info dump --all-namespaces
             
               # Dump a set of namespaces to /path/to/cluster-state
               kubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.AllNamespaces">
             <summary>
             -A, --all-namespaces
            
             If true, dump all namespaces.  If true, --namespaces is ignored.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.Namespaces">
             <summary>
             --namespaces
            
             A comma separated list of namespaces to dump.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.OutputDirectory">
             <summary>
             --output-directory
            
             Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.PodRunningTimeout">
             <summary>
             --pod-running-timeout
            
             The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlClusterInfoDumpSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlClusterInfoSettings">
             <summary>
             Display addresses of the master and services with label kubernetes.io/cluster-service=true To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
            
             </summary>
             <example>
               # Print the address of the master and cluster services
               kubectl cluster-info
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cake.Kubectl.KubectlCompletionSettings" -->
        <member name="T:Cake.Kubectl.KubectlConfigCurrentContextSettings">
             <summary>
             Displays the current-context
            
             </summary>
             <example>
               # Display the current-context
               kubectl config current-context
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigDeleteClusterSettings">
             <summary>
             Delete the specified cluster from the kubeconfig
            
             </summary>
             <example>
               # Delete the minikube cluster
               kubectl config delete-cluster minikube
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigDeleteContextSettings">
             <summary>
             Delete the specified context from the kubeconfig
            
             </summary>
             <example>
               # Delete the context for the minikube cluster
               kubectl config delete-context minikube
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigGetClustersSettings">
             <summary>
             Display clusters defined in the kubeconfig.
            
             </summary>
             <example>
               # List the clusters kubectl knows about
               kubectl config get-clusters
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigGetContextsSettings">
             <summary>
             Displays one or many contexts from the kubeconfig file.
            
             </summary>
             <example>
               # List all the contexts in your kubeconfig file
               kubectl config get-contexts
             
               # Describe one context in your kubeconfig file.
               kubectl config get-contexts my-context
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigGetContextsSettings.NoHeaders">
             <summary>
             --no-headers
            
             When using the default or custom-column output format, don't print headers (default print headers).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigGetContextsSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: name
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigSettings">
             <summary>
             Modify kubeconfig files using subcommands like "kubectl config set current-context my-context"
            
             
              The loading order follows these rules:
             
               1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes place.
               2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the last file in the list.
               3.  Otherwise, ${HOME}/.kube/config is used and no merging takes place.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigRenameContextSettings">
             <summary>
             Renames a context from the kubeconfig file.
            
             
              CONTEXT_NAME is the context name that you wish change.
             
              NEW_NAME is the new name you wish to set.
             
              Note: In case the context being renamed is the 'current-context', this field will also be updated.
             </summary>
             <example>
               # Rename the context 'old-name' to 'new-name' in your kubeconfig file
               kubectl config rename-context old-name new-name
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigSetClusterSettings">
             <summary>
             Sets a cluster entry in kubeconfig.
            
             
              Specifying a name that already exists will merge new fields on top of existing values for those fields.
             </summary>
             <example>
               # Set only the server field on the e2e cluster entry without touching other values.
               kubectl config set-cluster e2e --server=https://1.2.3.4
             
               # Embed certificate authority data for the e2e cluster entry
               kubectl config set-cluster e2e --certificate-authority=~/.kube/e2e/kubernetes.ca.crt
             
               # Disable cert checking for the dev cluster entry
               kubectl config set-cluster e2e --insecure-skip-tls-verify=true
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigSetClusterSettings.EmbedCerts">
             <summary>
             --embed-certs
            
             embed-certs for the cluster entry in kubeconfig
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigSetContextSettings">
             <summary>
             Sets a context entry in kubeconfig
            
             
              Specifying a name that already exists will merge new fields on top of existing values for those fields.
             </summary>
             <example>
               # Set the user field on the gce context entry without touching other values
               kubectl config set-context gce --user=cluster-admin
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigSetContextSettings.Current">
             <summary>
             --current
            
             Modify the current context
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigSetCredentialsSettings">
             <summary>
             Sets a user entry in kubeconfig
            
             
              Specifying a name that already exists will merge new fields on top of existing values.
             
               Client-certificate flags:
               --client-certificate=certfile --client-key=keyfile
             
               Bearer token flags:
                 --token=bearer_token
             
               Basic auth flags:
                 --username=basic_user --password=basic_password
             
              Bearer token and basic auth are mutually exclusive.
             </summary>
             <example>
               # Set only the "client-key" field on the "cluster-admin"
               # entry, without touching other values:
               kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key
             
               # Set basic auth for the "cluster-admin" entry
               kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif
             
               # Embed client certificate data in the "cluster-admin" entry
               kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true
             
               # Enable the Google Compute Platform auth provider for the "cluster-admin" entry
               kubectl config set-credentials cluster-admin --auth-provider=gcp
             
               # Enable the OpenID Connect auth provider for the "cluster-admin" entry with additional args
               kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar
             
               # Remove the "client-secret" config value for the OpenID Connect auth provider for the "cluster-admin" entry
               kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigSetCredentialsSettings.AuthProvider">
             <summary>
             --auth-provider
            
             Auth provider for the user entry in kubeconfig
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigSetCredentialsSettings.AuthProviderArg">
             <summary>
             --auth-provider-arg
            
             'key=value' arguments for the auth provider
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigSetCredentialsSettings.EmbedCerts">
             <summary>
             --embed-certs
            
             Embed client cert/key for the user entry in kubeconfig
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigSetSettings">
             <summary>
             Sets an individual value in a kubeconfig file
            
             
              PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.
             
              PROPERTY_VALUE is the new value you wish to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.
             
              Specifying a attribute name that already exists will merge new fields on top of existing values.
             </summary>
             <example>
               # Set server field on the my-cluster cluster to https://1.2.3.4
               kubectl config set clusters.my-cluster.server https://1.2.3.4
             
               # Set certificate-authority-data field on the my-cluster cluster.
               kubectl config set clusters.my-cluster.certificate-authority-data $(echo "cert_data_here" | base64 -i -)
             
               # Set cluster field in the my-context context to my-cluster.
               kubectl config set contexts.my-context.cluster my-cluster
             
               # Set client-key-data field in the cluster-admin user using --set-raw-bytes option.
               kubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigSetSettings.SetRawBytes">
             <summary>
             --set-raw-bytes
            
             When writing a []byte PROPERTY_VALUE, write the given string directly without base64 decoding.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigUnsetSettings">
             <summary>
             Unsets an individual value in a kubeconfig file
            
             
              PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.
             </summary>
             <example>
               # Unset the current-context.
               kubectl config unset current-context
             
               # Unset namespace in foo context.
               kubectl config unset contexts.foo.namespace
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigUseContextSettings">
             <summary>
             Sets the current-context in a kubeconfig file
            
             </summary>
             <example>
               # Use the context for the minikube cluster
               kubectl config use-context minikube
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlConfigViewSettings">
             <summary>
             Display merged kubeconfig settings or a specified kubeconfig file.
            
             
              You can use --output jsonpath={...} to extract specific values using a jsonpath expression.
             </summary>
             <example>
               # Show merged kubeconfig settings.
               kubectl config view
             
               # Show merged kubeconfig settings and raw certificate data.
               kubectl config view --raw
             
               # Get the password for the e2e user
               kubectl config view -o jsonpath='{.users[?(@.name == "e2e")].user.password}'
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.Flatten">
             <summary>
             --flatten
            
             Flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.Merge">
             <summary>
             --merge
            
             Merge the full hierarchy of kubeconfig files
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.Minify">
             <summary>
             --minify
            
             Remove all information not used by current-context from the output
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.Raw">
             <summary>
             --raw
            
             Display raw byte data
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConfigViewSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlConvertSettings">
             <summary>
             Convert config files between different API versions. Both YAML and JSON formats are accepted.
            
             
              The command takes filename, directory, or URL as input, and convert it into format of version specified by --output-version flag. If target version is not specified or not supported, convert to latest version.
             
              The default output will be printed to stdout in YAML format. One can use -o option to change to output destination.
             </summary>
             <example>
               # Convert 'pod.yaml' to latest version and print to stdout.
               kubectl convert -f pod.yaml
             
               # Convert the live state of the resource specified by 'pod.yaml' to the latest version
               # and print to stdout in JSON format.
               kubectl convert -f pod.yaml --local -o json
             
               # Convert all files under current directory to latest version and create them all.
               kubectl convert -f . | kubectl create -f -
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files to need to get converted.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Local">
             <summary>
             --local
            
             If true, convert will NOT try to contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.OutputVersion">
             <summary>
             --output-version
            
             Output the formatted object with the given group version (for ex: 'extensions/v1beta1').
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlConvertSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCordonSettings">
             <summary>
             Mark node as unschedulable.
            
             </summary>
             <example>
               # Mark node "foo" as unschedulable.
               kubectl cordon foo
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCordonSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCordonSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cake.Kubectl.KubectlCpSettings" -->
        <member name="P:Cake.Kubectl.KubectlCpSettings.Container">
             <summary>
             -c, --container
            
             Container name. If omitted, the first container in the pod will be chosen
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCpSettings.NoPreserve">
             <summary>
             --no-preserve
            
             The copied file/directory's ownership and permissions will not be preserved in the container
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateClusterrolebindingSettings">
             <summary>
             Create a ClusterRoleBinding for a particular ClusterRole.
            
             </summary>
             <example>
               # Create a ClusterRoleBinding for user1, user2, and group1 using the cluster-admin ClusterRole
               kubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=user1 --user=user2 --group=group1
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Clusterrole">
             <summary>
             --clusterrole
            
             ClusterRole this ClusterRoleBinding should reference
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Group">
             <summary>
             --group
            
             Groups to bind to the clusterrole
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Serviceaccount" -->
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterrolebindingSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateClusterroleSettings">
             <summary>
             Create a ClusterRole.
            
             </summary>
             <example>
               # Create a ClusterRole named "pod-reader" that allows user to perform "get", "watch" and "list" on pods
               kubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods
             
               # Create a ClusterRole named "pod-reader" with ResourceName specified
               kubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod
             
               # Create a ClusterRole named "foo" with API Group specified
               kubectl create clusterrole foo --verb=get,list,watch --resource=rs.extensions
             
               # Create a ClusterRole named "foo" with SubResource specified
               kubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status
             
               # Create a ClusterRole name "foo" with NonResourceURL specified
               kubectl create clusterrole "foo" --verb=get --non-resource-url=/logs/*
             
               # Create a ClusterRole name "monitoring" with AggregationRule specified
               kubectl create clusterrole monitoring --aggregation-rule="rbac.example.com/aggregate-to-monitoring=true"
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.AggregationRule">
             <summary>
             --aggregation-rule
            
             An aggregation label selector for combining ClusterRoles.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.NonResourceUrl">
             <summary>
             --non-resource-url
            
             A partial url that user should have access to.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.Resource">
             <summary>
             --resource
            
             Resource that the rule applies to
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.ResourceName">
             <summary>
             --resource-name
            
             Resource in the white list that the rule applies to, repeat this flag for multiple items
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateClusterroleSettings.Verb">
             <summary>
             --verb
            
             Verb that applies to the resources contained in the rule
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateConfigmapSettings">
             <summary>
             Create a configmap based on a file, directory, or specified literal value.
            
             
              A single configmap may package one or more key/value pairs.
             
              When creating a configmap based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.
             
              When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be packaged into the configmap.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).
             </summary>
             <example>
               # Create a new configmap named my-config based on folder bar
               kubectl create configmap my-config --from-file=path/to/bar
             
               # Create a new configmap named my-config with specified keys instead of file basenames on disk
               kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt
             
               # Create a new configmap named my-config with key1=config1 and key2=config2
               kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
             
               # Create a new configmap named my-config from the key=value pairs in the file
               kubectl create configmap my-config --from-file=path/to/bar
             
               # Create a new configmap named my-config from an env file
               kubectl create configmap my-config --from-env-file=path/to/bar.env
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.AppendHash">
             <summary>
             --append-hash
            
             Append a hash of the configmap to its name.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.FromEnvFile">
             <summary>
             --from-env-file
            
             Specify the path to a file to read lines of key=val pairs to create a configmap (i.e. a Docker .env file).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.FromFile">
             <summary>
             --from-file
            
             Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.FromLiteral">
             <summary>
             --from-literal
            
             Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateConfigmapSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateCronjobSettings">
             <summary>
             Create a cronjob with the specified name.
            
             </summary>
             <example>
               # Create a cronjob
               kubectl create cronjob my-job --image=busybox
             
               # Create a cronjob with command
               kubectl create cronjob my-job --image=busybox -- date
             
               # Create a cronjob with schedule
               kubectl create cronjob test-job --image=busybox --schedule="*/1 * * * *"
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.Image">
             <summary>
             --image
            
             Image name to run.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.Restart">
             <summary>
             --restart
            
             job's restart policy. supported values: OnFailure, Never
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.Schedule">
             <summary>
             --schedule
            
             A schedule in the Cron format the job should be run with.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateCronjobSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateDeploymentSettings">
             <summary>
             Create a deployment with the specified name.
            
             </summary>
             <example>
               # Create a new deployment named my-dep that runs the busybox image.
               kubectl create deployment my-dep --image=busybox
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.Image">
             <summary>
             --image
            
             Image name to run.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateDeploymentSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateJobSettings">
             <summary>
             Create a job with the specified name.
            
             </summary>
             <example>
               # Create a job
               kubectl create job my-job --image=busybox
             
               # Create a job with command
               kubectl create job my-job --image=busybox -- date
             
               # Create a job from a CronJob named "a-cronjob"
               kubectl create job test-job --from=cronjob/a-cronjob
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.From">
             <summary>
             --from
            
             The name of the resource to create a Job from (only cronjob is supported).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.Image">
             <summary>
             --image
            
             Image name to run.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateJobSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateSettings">
             <summary>
             Create a resource from a file or from stdin.
            
             
              JSON and YAML formats are accepted.
             </summary>
             <example>
               # Create a pod using the data in pod.json.
               kubectl create -f ./pod.json
             
               # Create a pod based on the JSON passed into stdin.
               cat pod.json | kubectl create -f -
             
               # Edit the data in docker-registry.yaml in JSON then create the resource using the edited data.
               kubectl create -f docker-registry.yaml --edit -o json
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Edit">
             <summary>
             --edit
            
             Edit the API resource before creating
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files to use to create the resource
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Raw">
             <summary>
             --raw
            
             Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSettings.WindowsLineEndings">
             <summary>
             --windows-line-endings
            
             Only relevant if --edit=true. Defaults to the line ending native to your platform.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateNamespaceSettings">
             <summary>
             Create a namespace with the specified name.
            
             </summary>
             <example>
               # Create a new namespace named my-namespace
               kubectl create namespace my-namespace
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateNamespaceSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings">
             <summary>
             Create a pod disruption budget with the specified name, selector, and desired minimum available pods
            
             </summary>
             <example>
               # Create a pod disruption budget named my-pdb that will select all pods with the app=rails label
               # and require at least one of them being available at any point in time.
               kubectl create poddisruptionbudget my-pdb --selector=app=rails --min-available=1
             
               # Create a pod disruption budget named my-pdb that will select all pods with the app=nginx label
               # and require at least half of the pods selected to be available at any point in time.
               kubectl create pdb my-pdb --selector=app=nginx --min-available=50%
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.MaxUnavailable">
             <summary>
             --max-unavailable
            
             The maximum number or percentage of unavailable pods this budget requires.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.MinAvailable">
             <summary>
             --min-available
            
             The minimum number or percentage of available pods this budget requires.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.Selector">
             <summary>
             --selector
            
             A label selector to use for this budget. Only equality-based selector requirements are supported.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePoddisruptionbudgetSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreatePriorityclassSettings">
             <summary>
             Create a priorityclass with the specified name, value, globalDefault and description
            
             </summary>
             <example>
               # Create a priorityclass named high-priority
               kubectl create priorityclass high-priority --value=1000 --description="high priority"
             
               # Create a priorityclass named default-priority that considered as the global default priority
               kubectl create priorityclass default-priority --value=1000 --global-default=true --description="default priority"
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.Description">
             <summary>
             --description
            
             description is an arbitrary string that usually provides guidelines on when this priority class should be used.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.GlobalDefault">
             <summary>
             --global-default
            
             global-default specifies whether this PriorityClass should be considered as the default priority.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreatePriorityclassSettings.Value">
             <summary>
             --value
            
             the value of this priority class.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateQuotaSettings">
             <summary>
             Create a resourcequota with the specified name, hard limits and optional scopes
            
             </summary>
             <example>
               # Create a new resourcequota named my-quota
               kubectl create quota my-quota --hard=cpu=1,memory=1G,pods=2,services=3,replicationcontrollers=2,resourcequotas=1,secrets=5,persistentvolumeclaims=10
             
               # Create a new resourcequota named best-effort
               kubectl create quota best-effort --hard=pods=100 --scopes=BestEffort
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.Hard">
             <summary>
             --hard
            
             A comma-delimited set of resource=quantity pairs that define a hard limit.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.Scopes">
             <summary>
             --scopes
            
             A comma-delimited set of quota scopes that must all match each object tracked by the quota.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateQuotaSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateRolebindingSettings">
             <summary>
             Create a RoleBinding for a particular Role or ClusterRole.
            
             </summary>
             <example>
               # Create a RoleBinding for user1, user2, and group1 using the admin ClusterRole
               kubectl create rolebinding admin --clusterrole=admin --user=user1 --user=user2 --group=group1
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Clusterrole">
             <summary>
             --clusterrole
            
             ClusterRole this RoleBinding should reference
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Group">
             <summary>
             --group
            
             Groups to bind to the role
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Role">
             <summary>
             --role
            
             Role this RoleBinding should reference
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlCreateRolebindingSettings.Serviceaccount" -->
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRolebindingSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateRoleSettings">
             <summary>
             Create a role with single rule.
            
             </summary>
             <example>
               # Create a Role named "pod-reader" that allows user to perform "get", "watch" and "list" on pods
               kubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods
             
               # Create a Role named "pod-reader" with ResourceName specified
               kubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod
             
               # Create a Role named "foo" with API Group specified
               kubectl create role foo --verb=get,list,watch --resource=rs.extensions
             
               # Create a Role named "foo" with SubResource specified
               kubectl create role foo --verb=get,list,watch --resource=pods,pods/status
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.Resource">
             <summary>
             --resource
            
             Resource that the rule applies to
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.ResourceName">
             <summary>
             --resource-name
            
             Resource in the white list that the rule applies to, repeat this flag for multiple items
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateRoleSettings.Verb">
             <summary>
             --verb
            
             Verb that applies to the resources contained in the rule
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings">
             <summary>
             Create a new secret for use with Docker registries.
            
             
               Dockercfg secrets are used to authenticate against Docker registries.
             
               When using the Docker command line to push images, you can authenticate to a given registry by running:
                   '$ docker login DOCKER_REGISTRY_SERVER --username=DOCKER_USER --password=DOCKER_PASSWORD --email=DOCKER_EMAIL'.
             
              That produces a ~/.dockercfg file that is used by subsequent 'docker push' and 'docker pull' commands to authenticate to the registry. The email address is optional.
             
               When creating applications, you may have a Docker registry that requires authentication.  In order for the
               nodes to pull images on your behalf, they have to have the credentials.  You can provide this information
               by creating a dockercfg secret and attaching it to your service account.
             </summary>
             <example>
               # If you don't already have a .dockercfg file, you can create a dockercfg secret directly by using:
               kubectl create secret docker-registry my-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.AppendHash">
             <summary>
             --append-hash
            
             Append a hash of the secret to its name.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.DockerEmail">
             <summary>
             --docker-email
            
             Email for Docker registry
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.DockerPassword">
             <summary>
             --docker-password
            
             Password for Docker registry authentication
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.DockerServer">
             <summary>
             --docker-server
            
             //index.docker.io/v1/': Server location for Docker registry
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.DockerUsername">
             <summary>
             --docker-username
            
             Username for Docker registry authentication
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.FromFile">
             <summary>
             --from-file
            
             Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretDockerRegistrySettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateSecretGenericSettings">
             <summary>
             Create a secret based on a file, directory, or specified literal value.
            
             
              A single secret may package one or more key/value pairs.
             
              When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.
             
              When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).
             </summary>
             <example>
               # Create a new secret named my-secret with keys for each file in folder bar
               kubectl create secret generic my-secret --from-file=path/to/bar
             
               # Create a new secret named my-secret with specified keys instead of names on disk
               kubectl create secret generic my-secret --from-file=ssh-privatekey=~/.ssh/id_rsa --from-file=ssh-publickey=~/.ssh/id_rsa.pub
             
               # Create a new secret named my-secret with key1=supersecret and key2=topsecret
               kubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret
             
               # Create a new secret named my-secret using a combination of a file and a literal
               kubectl create secret generic my-secret --from-file=ssh-privatekey=~/.ssh/id_rsa --from-literal=passphrase=topsecret
             
               # Create a new secret named my-secret from an env file
               kubectl create secret generic my-secret --from-env-file=path/to/bar.env
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.AppendHash">
             <summary>
             --append-hash
            
             Append a hash of the secret to its name.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.FromEnvFile">
             <summary>
             --from-env-file
            
             Specify the path to a file to read lines of key=val pairs to create a secret (i.e. a Docker .env file).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.FromFile">
             <summary>
             --from-file
            
             Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.FromLiteral">
             <summary>
             --from-literal
            
             Specify a key and literal value to insert in secret (i.e. mykey=somevalue)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.Type">
             <summary>
             --type
            
             The type of secret to create
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretGenericSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateSecretSettings">
             <summary>
             Create a secret using specified subcommand.
            
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateSecretTlsSettings">
             <summary>
             Create a TLS secret from the given public/private key pair.
            
             
              The public/private key pair must exist before hand. The public key certificate must be .PEM encoded and match the given private key.
             </summary>
             <example>
               # Create a new TLS secret named tls-secret with the given key pair:
               kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.AppendHash">
             <summary>
             --append-hash
            
             Append a hash of the secret to its name.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.Cert">
             <summary>
             --cert
            
             Path to PEM encoded public key certificate.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.Key">
             <summary>
             --key
            
             Path to private key associated with given certificate.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateSecretTlsSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateServiceaccountSettings">
             <summary>
             Create a service account with the specified name.
            
             </summary>
             <example>
               # Create a new service account named my-service-account
               kubectl create serviceaccount my-service-account
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceaccountSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateServiceClusteripSettings">
             <summary>
             Create a ClusterIP service with the specified name.
            
             </summary>
             <example>
               # Create a new ClusterIP service named my-cs
               kubectl create service clusterip my-cs --tcp=5678:8080
             
               # Create a new ClusterIP service named my-cs (in headless mode)
               kubectl create service clusterip my-cs --clusterip="None"
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.Clusterip">
             <summary>
             --clusterip
            
             Assign your own ClusterIP or set to 'None' for a 'headless' service (no loadbalancing).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.Tcp" -->
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceClusteripSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateServiceExternalnameSettings">
             <summary>
             Create an ExternalName service with the specified name.
            
             
              ExternalName service references to an external DNS address instead of only pods, which will allow application authors to reference services that exist off platform, on other clusters, or locally.
             </summary>
             <example>
               # Create a new ExternalName service named my-ns
               kubectl create service externalname my-ns --external-name bar.com
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.ExternalName">
             <summary>
             --external-name
            
             External name of service
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.Tcp" -->
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceExternalnameSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateServiceSettings">
             <summary>
             Create a service using specified subcommand.
            
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings">
             <summary>
             Create a LoadBalancer service with the specified name.
            
             </summary>
             <example>
               # Create a new LoadBalancer service named my-lbs
               kubectl create service loadbalancer my-lbs --tcp=5678:8080
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.Tcp" -->
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceLoadbalancerSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlCreateServiceNodeportSettings">
             <summary>
             Create a NodePort service with the specified name.
            
             </summary>
             <example>
               # Create a new NodePort service named my-ns
               kubectl create service nodeport my-ns --tcp=5678:8080
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.NodePort">
             <summary>
             --node-port
            
             Port used to expose the service on each node in a cluster.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.Tcp" -->
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlCreateServiceNodeportSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlDeleteSettings">
             <summary>
             Delete resources by filenames, stdin, resources and names, or by resources and label selector.
            
             
              JSON and YAML formats are accepted. Only one type of the arguments may be specified: filenames, resources and names, or resources and label selector.
             
              Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must pass a grace period of 0 and specify the --force flag.
             
              IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.
             
              Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.
             </summary>
             <example>
               # Delete a pod using the type and name specified in pod.json.
               kubectl delete -f ./pod.json
             
               # Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml.
               kubectl delete -k dir
             
               # Delete a pod based on the type and name in the JSON passed into stdin.
               cat pod.json | kubectl delete -f -
             
               # Delete pods and services with same names "baz" and "foo"
               kubectl delete pod,service baz foo
             
               # Delete pods and services with label name=myLabel.
               kubectl delete pods,services -l name=myLabel
             
               # Delete a pod with minimal delay
               kubectl delete pod foo --now
             
               # Force delete a pod on a dead node
               kubectl delete pod foo --grace-period=0 --force
             
               # Delete all pods
               kubectl delete pods --all
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.All">
             <summary>
             --all
            
             Delete all resources, including uninitialized ones, in the namespace of the specified resource types.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.AllNamespaces">
             <summary>
             -A, --all-namespaces
            
             If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Cascade">
             <summary>
             --cascade
            
             If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.FieldSelector">
             <summary>
             --field-selector
            
             Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Filename">
             <summary>
             -f, --filename
            
             containing the resource to delete.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Force">
             <summary>
             --force
            
             Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.GracePeriod">
             <summary>
             --grace-period
            
             Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.IgnoreNotFound">
             <summary>
             --ignore-not-found
            
             Treat "resource not found" as a successful delete. Defaults to "true" when --all is specified.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process a kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Now">
             <summary>
             --now
            
             If true, resources are signaled for immediate shutdown (same as --grace-period=1).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Output">
             <summary>
             -o, --output
            
             Output mode. Use "-o name" for shorter output (resource/name).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, not including uninitialized ones.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDeleteSettings.Wait">
             <summary>
             --wait
            
             If true, wait for resources to be gone before returning. This waits for finalizers.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlDescribeSettings">
             <summary>
             Show details of a specific resource or group of resources
            
             
              Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:
             
               $ kubectl describe TYPE NAME_PREFIX
             
              will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlDiffSettings">
             <summary>
             Diff configurations specified by filename or stdin between the current online configuration, and the configuration as it would be if applied.
            
             
              Output is always YAML.
             
              KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff command. By default, the "diff" command available in your path will be run with "-u" (unicode) and "-N" (treat new files as empty) options.
             </summary>
             <example>
               # Diff resources included in pod.json.
               kubectl diff -f pod.json
             
               # Diff file read from stdin
               cat service.yaml | kubectl diff -f -
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlDiffSettings.ExperimentalFieldManager">
             <summary>
             --experimental-field-manager
            
             Name of the manager used to track field ownership. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDiffSettings.ExperimentalForceConflicts">
             <summary>
             --experimental-force-conflicts
            
             If true, server-side apply will force the changes against conflicts. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDiffSettings.ExperimentalServerSide">
             <summary>
             --experimental-server-side
            
             If true, apply runs in the server instead of the client. This is an alpha feature and flag.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDiffSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files contains the configuration to diff
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDiffSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDiffSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlDrainSettings">
             <summary>
             Drain node in preparation for maintenance.
            
             
              The given node will be marked unschedulable to prevent new pods from arriving. 'drain' evicts the pods if the APIServer supportshttp://kubernetes.io/docs/admin/disruptions/ . Otherwise, it will use normal DELETE to delete the pods. The 'drain' evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are DaemonSet-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any DaemonSet-managed pods, because those pods would be immediately replaced by the DaemonSet controller, which ignores unschedulable markings.  If there are any pods that are neither mirror pods nor managed by ReplicationController, ReplicaSet, DaemonSet, StatefulSet or Job, then drain will not delete any pods unless you use --force.  --force will also allow deletion to proceed if the managing resource of one or more pods is missing.
             
              'drain' waits for graceful termination. You should not operate on the machine until the command completes.
             
              When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again.
             
              http://kubernetes.io/images/docs/kubectl_drain.svg
             </summary>
             <example>
               # Drain node "foo", even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet on it.
               $ kubectl drain foo --force
             
               # As above, but abort if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet, and use a grace period of 15 minutes.
               $ kubectl drain foo --grace-period=900
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.DeleteLocalData">
             <summary>
             --delete-local-data
            
             Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.Force">
             <summary>
             --force
            
             Continue even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.GracePeriod">
             <summary>
             --grace-period
            
             Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.IgnoreDaemonsets">
             <summary>
             --ignore-daemonsets
            
             Ignore DaemonSet-managed pods.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.PodSelector">
             <summary>
             --pod-selector
            
             Label selector to filter pods on the node
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlDrainSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up, zero means infinite
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlEditSettings">
             <summary>
             Edit a resource from the default editor.
            
             
              The edit command allows you to directly edit any API resource you can retrieve via the command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts filenames as well as command line arguments, although the files you point to must be previously saved versions of resources.
             
              Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.
             
              The default format is YAML. To edit in JSON, specify "-o json".
             
              The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.
             
              In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.
             </summary>
             <example>
               # Edit the service named 'docker-registry':
               kubectl edit svc/docker-registry
             
               # Use an alternative editor
               KUBE_EDITOR="nano" kubectl edit svc/docker-registry
             
               # Edit the job 'myjob' in JSON using the v1 API format:
               kubectl edit job.v1.batch/myjob -o json
             
               # Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation:
               kubectl edit deployment/mydeployment -o yaml --save-config
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files to use to edit the resource
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.OutputPatch">
             <summary>
             --output-patch
            
             Output the patch if the resource is edited.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlEditSettings.WindowsLineEndings">
             <summary>
             --windows-line-endings
            
             Defaults to the line ending native to your platform.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.EmptySettings">
            <summary>
            Using when there are no settings
            </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlExecSettings">
             <summary>
             Execute a command in a container.
            
             </summary>
             <example>
               # Get output from running 'date' from pod 123456-7890, using the first container by default
               kubectl exec 123456-7890 date
             
               # Get output from running 'date' in ruby-container from pod 123456-7890
               kubectl exec 123456-7890 -c ruby-container date
             
               # Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod 123456-7890
               # and sends stdout/stderr from 'bash' back to the client
               kubectl exec 123456-7890 -c ruby-container -i -t -- bash -il
             
               # List contents of /usr from the first container of pod 123456-7890 and sort by modification time.
               # If the command you want to execute in the pod has any flags in common (e.g. -i),
               # you must use two dashes (--) to separate your command's flags/arguments.
               # Also note, do not surround your command and its flags/arguments with quotes
               # unless that is how you would execute it normally (i.e., do ls -t /usr, not "ls -t /usr").
               kubectl exec 123456-7890 -i -t -- ls -t /usr
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlExecSettings.Container">
             <summary>
             -c, --container
            
             Container name. If omitted, the first container in the pod will be chosen
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExecSettings.Stdin">
             <summary>
             -i, --stdin
            
             Pass stdin to the container
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExecSettings.Tty">
             <summary>
             -t, --tty
            
             Stdin is a TTY
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cake.Kubectl.KubectlExplainSettings" -->
        <member name="T:Cake.Kubectl.KubectlExposeSettings">
             <summary>
             Expose a resource as a new Kubectl service.
            
             
              Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.
             
              Possible resources include (case insensitive):
             
              pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)
             </summary>
             <example>
               # Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000.
               kubectl expose rc nginx --port=80 --target-port=8000
             
               # Create a service for a replication controller identified by type and name specified in "nginx-controller.yaml", which serves on port 80 and connects to the containers on port 8000.
               kubectl expose -f nginx-controller.yaml --port=80 --target-port=8000
             
               # Create a service for a pod valid-pod, which serves on port 444 with the name "frontend"
               kubectl expose pod valid-pod --port=444 --name=frontend
             
               # Create a second service based on the above service, exposing the container port 8443 as port 443 with the name "nginx-https"
               kubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https
             
               # Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.
               kubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream
             
               # Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000.
               kubectl expose rs nginx --port=80 --target-port=8000
             
               # Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000.
               kubectl expose deployment nginx --port=80 --target-port=8000
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.ClusterIp">
             <summary>
             --cluster-ip
            
             ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.ExternalIp">
             <summary>
             --external-ip
            
             Additional external IP address (not managed by Kubectl) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to expose a service
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use. There are 2 generators: 'service/v1' and 'service/v2'. The only difference between them is that service port in v1 is named 'default', while it is left unnamed in v2. Default is 'service/v2'.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Labels">
             <summary>
             -l, --labels
            
             Labels to apply to the service created by this call.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.LoadBalancerIp">
             <summary>
             --load-balancer-ip
            
             IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Name">
             <summary>
             --name
            
             The name for the newly created object.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Overrides">
             <summary>
             --overrides
            
             An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Port">
             <summary>
             --port
            
             The port that the service should serve on. Copied from the resource being exposed, if unspecified
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Protocol">
             <summary>
             --protocol
            
             The network protocol for the service to be created. Default is 'TCP'.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Selector">
             <summary>
             --selector
            
             A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.SessionAffinity">
             <summary>
             --session-affinity
            
             If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.TargetPort">
             <summary>
             --target-port
            
             Name or number for the port on the container that the service should direct traffic to. Optional.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlExposeSettings.Type">
             <summary>
             --type
            
             Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.GenericRunner`1">
            <summary>
            
            </summary>
            <typeparam name="TSettings"></typeparam>
        </member>
        <member name="M:Cake.Kubectl.GenericRunner`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            
            </summary>
            <param name="fileSystem"></param>
            <param name="environment"></param>
            <param name="processRunner"></param>
            <param name="tools"></param>
        </member>
        <member name="M:Cake.Kubectl.GenericRunner`1.Run(System.String,`0,System.String[])">
            <summary>
            Runs given <paramref name="command"/> using given <paramref name=" settings"/> and <paramref name="additional"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="settings">The settings.</param>
            <param name="additional">Additional arguments.</param>
        </member>
        <member name="M:Cake.Kubectl.GenericRunner`1.RunWithResult(System.String,`0,System.String[])">
            <summary>
            Runs given <paramref name="command"/> using given <paramref name=" settings"/> and <paramref name="additional"/> and returns the exit code and output.
            </summary>
            <param name="command">The command.</param>
            <param name="settings">The settings.</param>
            <param name="additional">Additional arguments.</param>
            <returns>A <see cref="!:ValueTuple"/> containing ExitCode, Output and Errors.</returns>
        </member>
        <member name="T:Cake.Kubectl.KubectlGetSettings">
             <summary>
             Display one or many resources
            
             
              Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.
             
              Uninitialized objects are not shown unless --include-uninitialized is passed.
             
              By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlTool`1">
            <summary>
            Base class for all Kubectl related tools.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Cake.Kubectl.KubectlTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Kubectl.KubectlTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="tools">The tools.</param>
        </member>
        <member name="M:Cake.Kubectl.KubectlTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Kubectl.KubectlTool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Kubectl.KubectlKustomizeSettings">
             <summary>
             Print a set of API resources generated from instructions in a kustomization.yaml file.
            
             
              The argument must be the path to the directory containing the file, or a git repository URL with a path suffix specifying same with respect to the repository root.
             
              kubectl kustomize somedir
             </summary>
             <example>
               # Use the current working directory
               kubectl kustomize .
             
               # Use some shared configuration directory
               kubectl kustomize /home/configuration/production
             
               # Use a URL
               kubectl kustomize github.com/kubernetes-sigs/kustomize.git/examples/helloWorld?ref=v1.0.6
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlLabelSettings">
             <summary>
             Update the labels on a resource.
            
             
               *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.
               *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
               *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.
               *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.
             </summary>
             <example>
               # Update pod 'foo' with the label 'unhealthy' and the value 'true'.
               kubectl label pods foo unhealthy=true
             
               # Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value.
               kubectl label --overwrite pods foo status=unhealthy
             
               # Update all pods in the namespace
               kubectl label pods --all status=unhealthy
             
               # Update a pod identified by the type and name in "pod.json"
               kubectl label -f pod.json status=unhealthy
             
               # Update pod 'foo' only if the resource is unchanged from version 1.
               kubectl label pods foo status=unhealthy --resource-version=1
             
               # Update pod 'foo' by removing a label named 'bar' if it exists.
               # Does not require the --overwrite flag.
               kubectl label pods foo bar-
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.All">
             <summary>
             --all
            
             Select all resources, including uninitialized ones, in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.FieldSelector">
             <summary>
             --field-selector
            
             Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to update the labels
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.List">
             <summary>
             --list
            
             If true, display the labels for a given resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Local">
             <summary>
             --local
            
             If true, label will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Overwrite">
             <summary>
             --overwrite
            
             If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.ResourceVersion">
             <summary>
             --resource-version
            
             If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLabelSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlLogsSettings">
             <summary>
             Print the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.
            
             </summary>
             <example>
               # Return snapshot logs from pod nginx with only one container
               kubectl logs nginx
             
               # Return snapshot logs from pod nginx with multi containers
               kubectl logs nginx --all-containers=true
             
               # Return snapshot logs from all containers in pods defined by label app=nginx
               kubectl logs -lapp=nginx --all-containers=true
             
               # Return snapshot of previous terminated ruby container logs from pod web-1
               kubectl logs -p -c ruby web-1
             
               # Begin streaming the logs of the ruby container in pod web-1
               kubectl logs -f -c ruby web-1
             
               # Begin streaming the logs from all containers in pods defined by label app=nginx
               kubectl logs -f -lapp=nginx --all-containers=true
             
               # Display only the most recent 20 lines of output in pod nginx
               kubectl logs --tail=20 nginx
             
               # Show all logs from pod nginx written in the last hour
               kubectl logs --since=1h nginx
             
               # Return snapshot logs from first container of a job named hello
               kubectl logs job/hello
             
               # Return snapshot logs from container nginx-1 of a deployment named nginx
               kubectl logs deployment/nginx -c nginx-1
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.AllContainers">
             <summary>
             --all-containers
            
             Get all containers's logs in the pod(s).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Container">
             <summary>
             -c, --container
            
             Print the logs of this container
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Follow">
             <summary>
             -f, --follow
            
             Specify if the logs should be streamed.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.LimitBytes">
             <summary>
             --limit-bytes
            
             Maximum bytes of logs to return. Defaults to no limit.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.MaxLogRequests">
             <summary>
             --max-log-requests
            
             Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.PodRunningTimeout">
             <summary>
             --pod-running-timeout
            
             The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Previous">
             <summary>
             -p, --previous
            
             If true, print the logs for the previous instance of the container in a pod if it exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Since">
             <summary>
             --since
            
             Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.SinceTime">
             <summary>
             --since-time
            
             Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Tail">
             <summary>
             --tail
            
             Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlLogsSettings.Timestamps">
             <summary>
             --timestamps
            
             Include timestamps on each line in the log output
             </summary>
        </member>
        <member name="T:Cake.Kubectl.NamespaceDoc">
            <summary>
            This namespace contains Kubectl operations.
            </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlPatchSettings">
             <summary>
             Update field(s) of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.
            
             
              JSON and YAML formats are accepted.
             </summary>
             <example>
               # Partially update a node using a strategic merge patch. Specify the patch as JSON.
               kubectl patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}'
             
               # Partially update a node using a strategic merge patch. Specify the patch as YAML.
               kubectl patch node k8s-node-1 -p $'spec:\n unschedulable: true'
             
               # Partially update a node identified by the type and name specified in "node.json" using strategic merge patch.
               kubectl patch -f node.json -p '{"spec":{"unschedulable":true}}'
             
               # Update a container's image; spec.containers[*].name is required because it's a merge key.
               kubectl patch pod valid-pod -p '{"spec":{"containers":[{"name":"kubernetes-serve-hostname","image":"new image"}]}}'
             
               # Update a container's image using a json patch with positional arrays.
               kubectl patch pod valid-pod --type='json' -p='[{"op": "replace", "path": "/spec/containers/0/image", "value":"new image"}]'
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to update
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Local">
             <summary>
             --local
            
             If true, patch will operate on the content of the file, not the server-side resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Patch">
             <summary>
             -p, --patch
            
             The patch to be applied to the resource JSON file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPatchSettings.Type">
             <summary>
             --type
            
             The type of patch being provided; one of [json merge strategic]
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlPluginSettings">
             <summary>
             Provides utilities for interacting with plugins.
            
             
              Plugins provide extended functionality that is not part of the major command-line distribution. Please refer to the documentation and examples for more information about how write your own plugins.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlPluginListSettings">
             <summary>
             List all available plugin files on a user's PATH.
            
             
              Available plugin files are those that are: - executable - anywhere on the user's PATH - begin with "kubectl-"
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPluginListSettings.NameOnly">
             <summary>
             --name-only
            
             If true, display only the binary name of each plugin, rather than its full path
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlPortForwardSettings">
             <summary>
             Forward one or more local ports to a pod. This command requires the node to have 'socat' installed.
            
             
              Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.
             
              If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and rerun of the command is needed to resume forwarding.
             </summary>
             <example>
               # Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod
               kubectl port-forward pod/mypod 5000 6000
             
               # Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment
               kubectl port-forward deployment/mydeployment 5000 6000
             
               # Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the service
               kubectl port-forward service/myservice 5000 6000
             
               # Listen on port 8888 locally, forwarding to 5000 in the pod
               kubectl port-forward pod/mypod 8888:5000
             
               # Listen on port 8888 on all addresses, forwarding to 5000 in the pod
               kubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000
             
               # Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod
               kubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000
             
               # Listen on a random port locally, forwarding to 5000 in the pod
               kubectl port-forward pod/mypod :5000
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlPortForwardSettings.Address">
             <summary>
             --address
            
             Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlPortForwardSettings.PodRunningTimeout">
             <summary>
             --pod-running-timeout
            
             The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlProxySettings">
             <summary>
             Creates a proxy server or application-level gateway between localhost and the Kubectl API Server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote kubernetes API Server port, except for the path matching the static content path.
            
             </summary>
             <example>
               # To proxy all of the kubernetes api and nothing else, use:
             
               $ kubectl proxy --api-prefix=/
             
               # To proxy only part of the kubernetes api and also some static files:
             
               $ kubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/
             
               # The above lets you 'curl localhost:8001/api/v1/pods'.
             
               # To proxy the entire kubernetes api at a different root, use:
             
               $ kubectl proxy --api-prefix=/custom/
             
               # The above lets you 'curl localhost:8001/custom/api/v1/pods'
             
               # Run a proxy to kubernetes apiserver on port 8011, serving static content from ./local/www/
               kubectl proxy --port=8011 --www=./local/www/
             
               # Run a proxy to kubernetes apiserver on an arbitrary local port.
               # The chosen port for the server will be output to stdout.
               kubectl proxy --port=0
             
               # Run a proxy to kubernetes apiserver, changing the api prefix to k8s-api
               # This makes e.g. the pods api available at localhost:8001/k8s-api/v1/pods/
               kubectl proxy --api-prefix=/k8s-api
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.AcceptHosts">
             <summary>
             --accept-hosts
            
             :1\]$': Regular expression for hosts that the proxy should accept.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.AcceptPaths">
             <summary>
             --accept-paths
            
             Regular expression for paths that the proxy should accept.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.Address">
             <summary>
             --address
            
             The IP address on which to serve on.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.ApiPrefix">
             <summary>
             --api-prefix
            
             Prefix to serve the proxied API under.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.DisableFilter">
             <summary>
             --disable-filter
            
             If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.Keepalive">
             <summary>
             --keepalive
            
             keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.Port">
             <summary>
             -p, --port
            
             The port on which to run the proxy. Set to 0 to pick a random port.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.RejectMethods">
             <summary>
             --reject-methods
            
             Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.RejectPaths">
             <summary>
             --reject-paths
            
             Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.UnixSocket">
             <summary>
             -u, --unix-socket
            
             Unix socket on which to run the proxy.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.Www">
             <summary>
             -w, --www
            
             Also serve static files from the given directory under the specified prefix.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlProxySettings.WwwPrefix">
             <summary>
             -P, --www-prefix
            
             Prefix to serve static files under, if static file directory is specified.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlReplaceSettings">
             <summary>
             Replace a resource by filename or stdin.
            
             
              JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by
             
               $ kubectl get TYPE NAME -o yaml
             </summary>
             <example>
               # Replace a pod using the data in pod.json.
               kubectl replace -f ./pod.json
             
               # Replace a pod based on the JSON passed into stdin.
               cat pod.json | kubectl replace -f -
             
               # Update a single-container pod's image version (tag) to v4
               kubectl get pod mypod -o yaml | sed 's/\(image: myimage\):.*$/\1:v4/' | kubectl replace -f -
             
               # Force replace, delete and then re-create the resource
               kubectl replace --force -f ./pod.json
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Cascade">
             <summary>
             --cascade
            
             If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Filename">
             <summary>
             -f, --filename
            
             to use to replace the resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Force">
             <summary>
             --force
            
             Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.GracePeriod">
             <summary>
             --grace-period
            
             Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process a kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlReplaceSettings.Wait">
             <summary>
             --wait
            
             If true, wait for resources to be gone before returning. This waits for finalizers.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlRolloutHistorySettings">
             <summary>
             View previous rollout revisions and configurations.
            
             </summary>
             <example>
               # View the rollout history of a deployment
               kubectl rollout history deployment/abc
             
               # View the details of daemonset revision 3
               kubectl rollout history daemonset/abc --revision=3
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.Revision">
             <summary>
             --revision
            
             See the details, including podTemplate of the revision specified
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutHistorySettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlRolloutSettings">
             <summary>
             Manage the rollout of a resource.
            
             
              Valid resource types include:
             
               *  deployments
               *  daemonsets
               *  statefulsets
             </summary>
             <example>
               # Rollback to the previous deployment
               kubectl rollout undo deployment/abc
             
               # Check the rollout status of a daemonset
               kubectl rollout status daemonset/foo
             </example>
        </member>
        <member name="T:Cake.Kubectl.KubectlRolloutPauseSettings">
             <summary>
             Mark the provided resource as paused
            
             
              Paused resources will not be reconciled by a controller. Use "kubectl rollout resume" to resume a paused resource. Currently only deployments support being paused.
             </summary>
             <example>
               # Mark the nginx deployment as paused. Any current state of
               # the deployment will continue its function, new updates to the deployment will not
               # have an effect as long as the deployment is paused.
               kubectl rollout pause deployment/nginx
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutPauseSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutPauseSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutPauseSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutPauseSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutPauseSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutPauseSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlRolloutResumeSettings">
             <summary>
             Resume a paused resource
            
             
              Paused resources will not be reconciled by a controller. By resuming a resource, we allow it to be reconciled again. Currently only deployments support being resumed.
             </summary>
             <example>
               # Resume an already paused deployment
               kubectl rollout resume deployment/nginx
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutResumeSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutResumeSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutResumeSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutResumeSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutResumeSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutResumeSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlRolloutStatusSettings">
             <summary>
             Show the status of the rollout.
            
             
              By default 'rollout status' will watch the status of the latest rollout until it's done. If you don't want to wait for the rollout to finish then you can use --watch=false. Note that if a new rollout starts in-between, then 'rollout status' will continue watching the latest revision. If you want to pin to a specific revision and abort if it is rolled over by another revision, use --revision=N where N is the revision you need to watch for.
             </summary>
             <example>
               # Watch the rollout status of a deployment
               kubectl rollout status deployment/nginx
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutStatusSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutStatusSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutStatusSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutStatusSettings.Revision">
             <summary>
             --revision
            
             Pin to a specific revision for showing its status. Defaults to 0 (last revision).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutStatusSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before ending watch, zero means never. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutStatusSettings.Watch">
             <summary>
             -w, --watch
            
             Watch the status of the rollout until it's done.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlRolloutUndoSettings">
             <summary>
             Rollback to a previous rollout.
            
             </summary>
             <example>
               # Rollback to the previous deployment
               kubectl rollout undo deployment/abc
             
               # Rollback to daemonset revision 3
               kubectl rollout undo daemonset/abc --to-revision=3
             
               # Rollback to the previous deployment with dry-run
               kubectl rollout undo --dry-run=true deployment/abc
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRolloutUndoSettings.ToRevision">
             <summary>
             --to-revision
            
             The revision to rollback to. Default to 0 (last revision).
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cake.Kubectl.KubectlRunSettings" -->
        <member name="P:Cake.Kubectl.KubectlRunSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Attach">
             <summary>
             --attach
            
             If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Cascade">
             <summary>
             --cascade
            
             If true, cascade the deletion of the resources managed by this resource (e.g. Pods created by a ReplicationController).  Default true.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Command">
             <summary>
             --command
            
             If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Env">
             <summary>
             --env
            
             Environment variables to set in the container
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Expose">
             <summary>
             --expose
            
             If true, a public, external service is created for the container(s) which are run
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Filename">
             <summary>
             -f, --filename
            
             to use to replace the resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Force">
             <summary>
             --force
            
             Only used when grace-period=0. If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Generator">
             <summary>
             --generator
            
             The name of the API generator to use, see http://kubernetes.io/docs/user-guide/kubectl-conventions/#generators for a list.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.GracePeriod">
             <summary>
             --grace-period
            
             Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Hostport">
             <summary>
             --hostport
            
             The host port mapping for the container port. To demonstrate a single-machine container.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Image">
             <summary>
             --image
            
             The image for the container to run.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.ImagePullPolicy">
             <summary>
             --image-pull-policy
            
             The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process a kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Labels">
             <summary>
             -l, --labels
            
             Comma separated labels to apply to the pod(s). Will override previous values.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.LeaveStdinOpen">
             <summary>
             --leave-stdin-open
            
             If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Limits">
             <summary>
             --limits
            
             The resource requirement limits for this container.  For example, 'cpu=200m,memory=512Mi'.  Note that server side components may assign limits depending on the server configuration, such as limit ranges.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Overrides">
             <summary>
             --overrides
            
             An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.PodRunningTimeout">
             <summary>
             --pod-running-timeout
            
             The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Port">
             <summary>
             --port
            
             The port that this container exposes.  If --expose is true, this is also the port used by the service that is created.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Quiet">
             <summary>
             --quiet
            
             If true, suppress prompt messages.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Replicas">
             <summary>
             -r, --replicas
            
             Number of replicas to create for this container. Default is 1.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Requests">
             <summary>
             --requests
            
             The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Restart">
             <summary>
             --restart
            
             The restart policy for this Pod.  Legal values [Always, OnFailure, Never].  If set to 'Always' a deployment is created, if set to 'OnFailure' a job is created, if set to 'Never', a regular pod is created. For the latter two --replicas must be 1.  Default 'Always', for CronJobs `Never`.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Rm">
             <summary>
             --rm
            
             If true, delete resources created in this command for attached containers.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.SaveConfig">
             <summary>
             --save-config
            
             If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Schedule">
             <summary>
             --schedule
            
             A schedule in the Cron format the job should be run with.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.ServiceGenerator">
             <summary>
             --service-generator
            
             The name of the generator to use for creating a service.  Only used if --expose is true
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.ServiceOverrides">
             <summary>
             --service-overrides
            
             An inline JSON override for the generated service object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.  Only used if --expose is true.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Serviceaccount">
             <summary>
             --serviceaccount
            
             Service account to set in the pod spec
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Stdin">
             <summary>
             -i, --stdin
            
             Keep stdin open on the container(s) in the pod, even if nothing is attached.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Tty">
             <summary>
             -t, --tty
            
             Allocated a TTY for each container in the pod.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlRunSettings.Wait">
             <summary>
             --wait
            
             If true, wait for resources to be gone before returning. This waits for finalizers.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlScaleSettings">
             <summary>
             Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet.
            
             
              Scale also allows users to specify one or more preconditions for the scale action.
             
              If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.
             </summary>
             <example>
               # Scale a replicaset named 'foo' to 3.
               kubectl scale --replicas=3 rs/foo
             
               # Scale a resource identified by type and name specified in "foo.yaml" to 3.
               kubectl scale --replicas=3 -f foo.yaml
             
               # If the deployment named mysql's current size is 2, scale mysql to 3.
               kubectl scale --current-replicas=2 --replicas=3 deployment/mysql
             
               # Scale multiple replication controllers.
               kubectl scale --replicas=5 rc/foo rc/bar rc/baz
             
               # Scale statefulset named 'web' to 3.
               kubectl scale --replicas=3 statefulset/web
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.All">
             <summary>
             --all
            
             Select all resources in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.CurrentReplicas">
             <summary>
             --current-replicas
            
             Precondition for current size. Requires that the current size of the resource match this value in order to scale.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to set a new size
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Replicas">
             <summary>
             --replicas
            
             The new desired number of replicas. Required.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.ResourceVersion">
             <summary>
             --resource-version
            
             Precondition for resource version. Requires that the current resource version match this value in order to scale.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlScaleSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetEnvSettings">
             <summary>
             Update environment variables on a pod template.
            
             
              List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.
             
              If "--env -" is passed, environment variables can be read from STDIN using the standard env syntax.
             
              Possible resources include (case insensitive):
             
               pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs)
             </summary>
             <example>
               # Update deployment 'registry' with a new environment variable
               kubectl set env deployment/registry STORAGE_DIR=/local
             
               # List the environment variables defined on a deployments 'sample-build'
               kubectl set env deployment/sample-build --list
             
               # List the environment variables defined on all pods
               kubectl set env pods --all --list
             
               # Output modified deployment in YAML, and does not alter the object on the server
               kubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml
             
               # Update all containers in all replication controllers in the project to have ENV=prod
               kubectl set env rc --all ENV=prod
             
               # Import environment from a secret
               kubectl set env --from=secret/mysecret deployment/myapp
             
               # Import environment from a config map with a prefix
               kubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp
             
               # Import specific keys from a config map
               kubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp
             
               # Remove the environment variable ENV from container 'c1' in all deployment configs
               kubectl set env deployments --all --containers="c1" ENV-
             
               # Remove the environment variable ENV from a deployment definition on disk and
               # update the deployment config on the server
               kubectl set env -f deploy.json ENV-
             
               # Set some of the local shell environment into a deployment config on the server
               env | grep RAILS_ | kubectl set env -e - deployment/registry
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.All">
             <summary>
             --all
            
             If true, select all resources in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Containers">
             <summary>
             -c, --containers
            
             The names of containers in the selected pod templates to change - may use wildcards
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Env">
             <summary>
             -e, --env
            
             Specify a key-value pair for an environment variable to set into each container.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files the resource to update the env
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.From">
             <summary>
             --from
            
             The name of a resource from which to inject environment variables
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Keys">
             <summary>
             --keys
            
             Comma-separated list of keys to import from specified resource
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.List">
             <summary>
             --list
            
             If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Local">
             <summary>
             --local
            
             If true, set env will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Overwrite">
             <summary>
             --overwrite
            
             If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Prefix">
             <summary>
             --prefix
            
             Prefix to append to variable names
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Resolve">
             <summary>
             --resolve
            
             If true, show secret or configmap references when listing variables
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetEnvSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetImageSettings">
             <summary>
             Update existing container image(s) of resources.
            
             
              Possible resources include (case insensitive):
             
               pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), replicaset (rs)
             </summary>
             <example>
               # Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'.
               kubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1
             
               # Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'
               kubectl set image deployments,rc nginx=nginx:1.9.1 --all
             
               # Update image of all containers of daemonset abc to 'nginx:1.9.1'
               kubectl set image daemonset abc *=nginx:1.9.1
             
               # Print result (in yaml format) of updating nginx container image from local file, without hitting the server
               kubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.All">
             <summary>
             --all
            
             Select all resources, including uninitialized ones, in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Local">
             <summary>
             --local
            
             If true, set image will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetImageSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetSettings">
             <summary>
             Configure application resources
            
             
              These commands help you make changes to existing application resources.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetResourcesSettings">
             <summary>
             Specify compute resource requirements (cpu, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.
            
             
              for each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.
             
              Possible resources include (case insensitive): Use "kubectl api-resources" for a complete list of supported resources..
             </summary>
             <example>
               # Set a deployments nginx container cpu limits to "200m" and memory to "512Mi"
               kubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi
             
               # Set the resource request and limits for all containers in nginx
               kubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi
             
               # Remove the resource requests for resources on containers in nginx
               kubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0
             
               # Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server
               kubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.All">
             <summary>
             --all
            
             Select all resources, including uninitialized ones, in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Containers">
             <summary>
             -c, --containers
            
             The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Limits">
             <summary>
             --limits
            
             The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Local">
             <summary>
             --local
            
             If true, set resources will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Requests">
             <summary>
             --requests
            
             The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, not including uninitialized ones,supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetResourcesSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetSelectorSettings">
             <summary>
             Set the selector on a resource. Note that the new selector will overwrite the old selector if the resource had one prior to the invocation of 'set selector'.
            
             
              A selector must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used. Note: currently selectors can only be set on Service objects.
             </summary>
             <example>
               # set the labels and selector before creating a deployment/service pair.
               kubectl create service clusterip my-svc --clusterip="None" -o yaml --dry-run | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -
               kubectl create deployment my-dep -o yaml --dry-run | kubectl label --local -f - environment=qa -o yaml | kubectl create -f -
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.All">
             <summary>
             --all
            
             Select all resources in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.Filename">
             <summary>
             -f, --filename
            
             identifying the resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.Local">
             <summary>
             --local
            
             If true, annotation will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.ResourceVersion">
             <summary>
             --resource-version
            
             If non-empty, the selectors update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSelectorSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetServiceaccountSettings">
             <summary>
             Update ServiceAccount of pod template resources.
            
             
              Possible resources (case insensitive) can be:
             
              replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs), statefulset
             </summary>
             <example>
               # Set Deployment nginx-deployment's ServiceAccount to serviceaccount1
               kubectl set serviceaccount deployment nginx-deployment serviceaccount1
             
               # Print the result (in yaml format) of updated nginx deployment with serviceaccount from local file, without hitting apiserver
               kubectl set sa -f nginx-deployment.yaml serviceaccount1 --local --dry-run -o yaml
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.All">
             <summary>
             --all
            
             Select all resources, including uninitialized ones, in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files identifying the resource to get from a server.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Local">
             <summary>
             --local
            
             If true, set serviceaccount will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Record">
             <summary>
             --record
            
             Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetServiceaccountSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlSetSubjectSettings">
             <summary>
             Update User, Group or ServiceAccount in a RoleBinding/ClusterRoleBinding.
            
             </summary>
             <example>
               # Update a ClusterRoleBinding for serviceaccount1
               kubectl set subject clusterrolebinding admin --serviceaccount=namespace:serviceaccount1
             
               # Update a RoleBinding for user1, user2, and group1
               kubectl set subject rolebinding admin --user=user1 --user=user2 --group=group1
             
               # Print the result (in yaml format) of updating rolebinding subjects from a local, without hitting the server
               kubectl create rolebinding admin --role=admin --user=admin -o yaml --dry-run | kubectl set subject --local -f - --user=foo -o yaml
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.All">
             <summary>
             --all
            
             Select all resources, including uninitialized ones, in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Filename">
             <summary>
             -f, --filename
            
             Filename, directory, or URL to files the resource to update the subjects
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Group">
             <summary>
             --group
            
             Groups to bind to the role
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Kustomize">
             <summary>
             -k, --kustomize
            
             Process the kustomization directory. This flag can't be used together with -f or -R.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Local">
             <summary>
             --local
            
             If true, set subject will NOT contact api-server but run locally.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, not including uninitialized ones, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Serviceaccount">
             <summary>
             --serviceaccount
            
             Service accounts to bind to the role
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlSetSubjectSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlTaintSettings">
             <summary>
             Update the taints on one or more nodes.
            
             
               *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.
               *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.
               *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app
               *  The value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.
               *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.
               *  Currently taint can only apply to node.
             </summary>
             <example>
               # Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'.
               # If a taint with that key and effect already exists, its value is replaced as specified.
               kubectl taint nodes foo dedicated=special-user:NoSchedule
             
               # Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists.
               kubectl taint nodes foo dedicated:NoSchedule-
             
               # Remove from node 'foo' all the taints with key 'dedicated'
               kubectl taint nodes foo dedicated-
             
               # Add a taint with key 'dedicated' on nodes having label mylabel=X
               kubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.All">
             <summary>
             --all
            
             Select all nodes in the cluster
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.Overwrite">
             <summary>
             --overwrite
            
             If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTaintSettings.Validate">
             <summary>
             --validate
            
             If true, use a schema to validate the input before sending it
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlTopSettings">
             <summary>
             Display Resource (CPU/Memory/Storage) usage.
            
             
              The top command allows you to see the resource consumption for nodes or pods.
             
              This command requires Heapster to be correctly configured and working on the server.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlTopNodeSettings">
             <summary>
             Display Resource (CPU/Memory/Storage) usage of nodes.
            
             
              The top-node command allows you to see the resource consumption of nodes.
             </summary>
             <example>
               # Show metrics for all nodes
               kubectl top node
             
               # Show metrics for a given node
               kubectl top node NODE_NAME
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopNodeSettings.HeapsterNamespace">
             <summary>
             --heapster-namespace
            
             Namespace Heapster service is located in
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopNodeSettings.HeapsterPort">
             <summary>
             --heapster-port
            
             Port name in service to use
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopNodeSettings.HeapsterScheme">
             <summary>
             --heapster-scheme
            
             Scheme (http or https) to connect to Heapster as
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopNodeSettings.HeapsterService">
             <summary>
             --heapster-service
            
             Name of Heapster service
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopNodeSettings.NoHeaders">
             <summary>
             --no-headers
            
             If present, print output without headers
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopNodeSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlTopPodSettings">
             <summary>
             Display Resource (CPU/Memory/Storage) usage of pods.
            
             
              The 'top pod' command allows you to see the resource consumption of pods.
             
              Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.
             </summary>
             <example>
               # Show metrics for all pods in the default namespace
               kubectl top pod
             
               # Show metrics for all pods in the given namespace
               kubectl top pod --namespace=NAMESPACE
             
               # Show metrics for a given pod and its containers
               kubectl top pod POD_NAME --containers
             
               # Show metrics for the pods defined by label name=myLabel
               kubectl top pod -l name=myLabel
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.AllNamespaces">
             <summary>
             -A, --all-namespaces
            
             If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.Containers">
             <summary>
             --containers
            
             If present, print usage of containers within a pod.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.HeapsterNamespace">
             <summary>
             --heapster-namespace
            
             Namespace Heapster service is located in
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.HeapsterPort">
             <summary>
             --heapster-port
            
             Port name in service to use
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.HeapsterScheme">
             <summary>
             --heapster-scheme
            
             Scheme (http or https) to connect to Heapster as
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.HeapsterService">
             <summary>
             --heapster-service
            
             Name of Heapster service
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.NoHeaders">
             <summary>
             --no-headers
            
             If present, print output without headers.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlTopPodSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlUncordonSettings">
             <summary>
             Mark node as schedulable.
            
             </summary>
             <example>
               # Mark node "foo" as schedulable.
               $ kubectl uncordon foo
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlUncordonSettings.DryRun">
             <summary>
             --dry-run
            
             If true, only print the object that would be sent, without sending it.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlUncordonSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlVersionSettings">
             <summary>
             Print the client and server version information for the current context
            
             </summary>
             <example>
               # Print the client and server versions for the current context
               kubectl version
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlVersionSettings.Client">
             <summary>
             --client
            
             Client version only (no server required).
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlVersionSettings.Output">
             <summary>
             -o, --output
            
             One of 'yaml' or 'json'.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlVersionSettings.Short">
             <summary>
             --short
            
             Print just the version number.
             </summary>
        </member>
        <member name="T:Cake.Kubectl.KubectlWaitSettings">
             <summary>
             Experimental: Wait for a specific condition on one or many resources.
            
             
              The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.
             
              Alternatively, the command can wait for the given set of resources to be deleted by providing the "delete" keyword as the value to the --for flag.
             
              A successful message will be printed to stdout indicating when the specified condition has been met. One can use -o option to change to output destination.
             </summary>
             <example>
               # Wait for the pod "busybox1" to contain the status condition of type "Ready".
               kubectl wait --for=condition=Ready pod/busybox1
             
               # Wait for the pod "busybox1" to be deleted, with a timeout of 60s, after having issued the "delete" command.
               kubectl delete pod/busybox1
               kubectl wait --for=delete pod/busybox1 --timeout=60s
             </example>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.All">
             <summary>
             --all
            
             Select all resources in the namespace of the specified resource types
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.AllNamespaces">
             <summary>
             -A, --all-namespaces
            
             If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.AllowMissingTemplateKeys">
             <summary>
             --allow-missing-template-keys
            
             If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.FieldSelector">
             <summary>
             --field-selector
            
             Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.Filename">
             <summary>
             -f, --filename
            
             identifying the resource.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.For">
             <summary>
             --for
            
             The condition to wait on: [delete|condition=condition-name].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.Output">
             <summary>
             -o, --output
            
             Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.Recursive">
             <summary>
             -R, --recursive
            
             Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.Selector">
             <summary>
             -l, --selector
            
             Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.Template">
             <summary>
             --template
            
             Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
             </summary>
        </member>
        <member name="P:Cake.Kubectl.KubectlWaitSettings.Timeout">
             <summary>
             --timeout
            
             The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week.
             </summary>
        </member>
    </members>
</doc>
