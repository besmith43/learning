@page "/newhome"
@rendermode InteractiveAuto
@inject IJSRuntime JS

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudToggleIconButton Toggled="@_draggable" ToggledChanged="OnToggledChanged" Icon="@Icons.Material.Filled.AlarmOff"
    Color="@Color.Error" Title="Off" ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success"
    ToggledTitle="On" />

<MudPaper Class="d-flex flex-column pa-4 gap-4" Width="100%">
    <QuickLinks />
</MudPaper>


<MudPaper Class="d-flex">
    <MudPaper Class="d-flex flex-column pa-4 gap-4" Width="30%">
        <Profile />
    </MudPaper>



    <MudPaper Class="d-flex flex-column pa-4 gap-4" Width="100%">
        <MudDropContainer T="DropZoneItem" Items="DropZoneItems"
            ItemsSelector="@((item, dropzone) => item.Order == dropzone)" ItemDropped="ItemUpdated">
            <ChildContent>
                <MudDropZone T="DropZoneItem" Identifier="OnlyDZ" AllowReorder="@_draggable"></MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <DynamicComponent Type="@context.Component" />
            </ItemRenderer>
        </MudDropContainer>
        @* <EmployeeTab />
        <StudentSupportTab />
        <CampusNewsTab />
        <CampusResourcesTab />
        <WorkLifeTab /> *@
    </MudPaper>
</MudPaper>




@code {
    public List<DropZoneItem> DropZoneItems { get; set; } = new List<DropZoneItem>();
    private bool _draggable { get; set; } = false;

    private void ItemUpdated(MudItemDropInfo<DropZoneItem> dropItem)
    {
        dropItem.Item.Order = dropItem.DropzoneIdentifier;
    }

    private void OnToggledChanged(bool value)
    {
        await JS.InvokeVoidAsync()
        _draggable = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        DropZoneItems.Add(new DropZoneItem() { Name = "Employee Tab", Order = "OnlyDZ", OrderIndex = 5, Component = typeof(EmployeeTab) });
        DropZoneItems.Add(new DropZoneItem()
            {
                Name = "Student Support Tab",
                Order = "OnlyDZ",
                OrderIndex = 2,
                Component =
            typeof(StudentSupportTab)
            });
        DropZoneItems.Add(new DropZoneItem() { Name = "Campus News Tab", Order = "OnlyDZ", OrderIndex = 4, Component = typeof(CampusNewsTab) });
        DropZoneItems.Add(new DropZoneItem()
            {
                Name = "Campus Resources Tab",
                Order = "OnlyDZ",
                OrderIndex = 3,
                Component =
            typeof(CampusResourcesTab)
            });
        DropZoneItems.Add(new DropZoneItem() { Name = "Work Life Tab", Order = "OnlyDZ", OrderIndex = 1, Component = typeof(WorkLifeTab) });

        DropZoneItems.Sort((x, y) => x.OrderIndex.CompareTo(y.OrderIndex));
    }

    public class DropZoneItem
    {
        public string Name { get; set; }
        public string Order { get; set; } = "OnlyDZ";
        public int OrderIndex { get; set; }
        public Type Component { get; set; }
    }
}