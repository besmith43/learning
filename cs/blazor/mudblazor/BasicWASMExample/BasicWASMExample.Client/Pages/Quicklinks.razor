@page "/QuickLinks"
@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) *@
@inject NavigationManager MyNavigationManager
@* @inject QuickLinksService QLService *@
@* @inject IConfiguration config *@
@inject Microsoft.Extensions.Configuration.IConfiguration config
@* @inject IHttpClientFactory HttpFactory *@
@inject HttpClient Http


@if (_separatePage)
{
    <PageTitle>QuickLinks</PageTitle>
}

@if (QLBtnList.Count == 0)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Width="200px" Height="110px" />
}
else
{


<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">QuickLinks</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton OnClick="OnExpandCollapseClick" Icon="@_collapseIcon" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Style="background-color: rgba(96, 92, 168, .1);">
        <MudDropContainer T="QuickLink" Items="QLBtnList" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="" >
            <ChildContent>
                <MudPaper Class="ma-4" Style="background-color: rgba(96, 92, 168, .1);">
                    <MudList Clickable="true" Class="mud-height-full">
                        @* <MudListSubheader>Drop Zone 1</MudListSubheader> *@
                        <MudDropZone T="QuickLink" Identifier="1" Class="d-flex justify-center gap-4" AllowReorder="_reorder" />
                    </MudList>
                </MudPaper>
        @* <MudText Typo="Typo.body1">This is the content of the card</MudText> *@
        <MudCollapse Expanded="_expanded">
            @* This is the content of the collapse *@
                <MudPaper Class="ma-4">
                    <MudList Clickable="true" Class="mud-height-full">
                        @* <MudListSubheader>Drop Zone 2</MudListSubheader> *@
                        <MudDropZone T="QuickLink" Identifier="2" Class="d-flex justify-center gap-4" AllowReorder="_reorder" />
                    </MudList>
                </MudPaper>
        </MudCollapse>
        </ChildContent>
        <ItemRenderer>
            <MudCard Class="@($"d-inline-flex pa-4 rounded-lg bg-primary {_cursor}")" Width="100px" Height="100px">
                <MudCardContent>
                    <MudLink Href="@context.url" Target="_blank" Class="@($"{_cursor}")">
                        <MudIcon Icon="@context.icon" Class="mr-2 justify-center" Style="@($"color:{Colors.Shades.White};")" Size="Size.Large" />
                    </MudLink>
                </MudCardContent>
            </MudCard>
            <MudText Typo="Typo.body1" Align="Align.Center" Class="@($"text-black {_cursor}")">@context.name</MudText>
            @* <MudText Typo="Typo.body1" Class="text-black" Style="text-align: center;">@context.name</MudText> *@
        </ItemRenderer>
        </MudDropContainer>
    </MudCardContent>
</MudCard>


}


@code {
    public  bool _separatePage { get; set; } = false;
    List<QuickLink> QLBtnList = new List<QuickLink>();
    bool _expanded = false;
    bool _reorder = false;
    string _collapseIcon = Icons.Material.Filled.MoreVert;
    string _cursor = "cursor-pointer";


    protected override async Task OnInitializedAsync()
    {
        // QLBtnList.Add(new QuickLink { name = "Google", url = "https://www.google.com", icon = Icons.Custom.Brands.Google, order = 1, Selector = "1" });
        // QLBtnList.Add(new QuickLink { name = "Git", url = "https://www.git.com", icon = "fa-brands fa-git-alt", order = 2, Selector = "1" });
        // QLBtnList.Add(new QuickLink { name = "Microsoft", url = "https://www.microsoft.com", icon = Icons.Custom.Brands.Microsoft, order = 2, Selector = "2" });
        // QLBtnList.Add(new QuickLink { name = "Github", url = "https://www.github.com", icon = Icons.Custom.Brands.GitHub, order = 3, Selector = "2" });
        // QLBtnList.Add(new QuickLink { name = "Apple", url = "https://www.apple.com", icon = Icons.Custom.Brands.Apple, order = 4, Selector = "2" });
        // QLBtnList.Add(new QuickLink { name = "Facebook", url = "https://www.facebook.com", icon = Icons.Custom.Brands.Facebook, order = 5, Selector = "2" });
        // QLBtnList.Add(new QuickLink { name = "Twitter", url = "https://www.twitter.com", icon = Icons.Custom.Brands.Twitter, order = 6, Selector = "2" });
        // QLBtnList.Add(new QuickLink { name = "Instagram", url = "https://www.instagram.com", icon = Icons.Custom.Brands.Instagram, order = 7, Selector = "2" });
        // QLBtnList.Add(new QuickLink { name = "Reddit", url = "https://www.reddit.com", icon = Icons.Custom.Brands.Reddit, order = 8, Selector = "2" });

/*
        var result = QLService.GetQuickLinks();

        if (result is List<QuickLink>)
        {
            QLBtnList = result.AsT0;
        }
        else
        {
            QLBtnList = new List<QuickLink>();
        }
*/

        await GetQuickLinks();
        // StateHasChanged();

        if (MyNavigationManager.Uri.Contains("quicklinks"))
        {
            _separatePage = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // await GetQuickLinks();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            // await GetQuickLinks(); 
            // StateHasChanged();

        }

       
    }


    private async Task GetQuickLinks()
    {
        // var response = await Http.GetAsync(config["BaseAPIUrl"] + "/QuickLinks");
        // var response = await Http.GetAsync(SharedData.BaseAPIAddress + "/QuickLinks");
        // var response = await Http.GetAsync("http://localhost:5000/api/QuickLinks");
        var response = await Http.GetAsync("http://localhost:5080/api/QuickLinks");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<List<QuickLink>>();
            QLBtnList.AddRange(result);
            // StateHasChanged();
        }
        else
        {
            QLBtnList = new List<QuickLink>();
        }

        Console.WriteLine("QLBtnList: " + QLBtnList.Count);
    }

    private void OnExpandCollapseClick() {
        _expanded = !_expanded;
        _reorder = !_reorder;

        _collapseIcon = _expanded ? Icons.Material.Filled.LockOpen : Icons.Material.Filled.MoreVert;
        _cursor = _reorder ? "cursor-grab" : "cursor-pointer";
    }

    private void ItemUpdated(MudItemDropInfo<QuickLink> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }
}