@page "/table"

<PageTitle>Table</PageTitle>

<h1>Table</h1>

<p>This component demonstrates showing data.</p>

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
<MudTable Items="@forecasts" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Summary</MudTh>
        <MudTh>TemperatureC</MudTh>
        <MudTh>TemperatureF</MudTh>
        <MudTh>Date</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Summary">@context.Summary</MudTd>
        <MudTd DataLabel="TemperatureC">@context.TemperatureC</MudTd>
        <MudTd DataLabel="TemperatureF">@context.TemperatureF</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("yyyy-MM-dd")</MudTd>
    </RowTemplate>
</MudTable>
}
@code {
    private IQueryable<WeatherForecast> forecasts;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
        forecasts = Enumerable.Range(1, 25).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
        _loading = false;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
