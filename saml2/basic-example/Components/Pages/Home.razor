@page "/"
@* @using Microsoft.AspNetCore.Antiforgery *@
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@* @attribute [AntiforgeryRequestToken(Order = 2000)] *@
@attribute [IgnoreAntiforgeryToken]
@* @using Microsoft.AspNetCore.Antiforgery; *@
@* @attribute [RequireAntiforgeryToken] *@
@* @attribute [IgnoreAntiforgeryToken] *@
@using api.Models
@* @inject PostFormService PostFormService *@

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if(HttpMethods.IsPost(httpContextAccessor.HttpContext.Request.Method))
{
	<form method="post" @formname="landing-sso">
		<div>
			<label>No idea</label>
		</div>
	</form>
}

@if (!hasSharkCookie)
{
	<p>no shark cookie</p>
	<meta http-equiv="refresh" content="0; URL=@redirectUrl" />
}
else
{
	<p>SessionID: @sessionID</p>
}


@code {
	[Inject]
	IHttpContextAccessor httpContextAccessor { get; set; }
	HttpClient client = new HttpClient();


	bool hasSharkCookie = false;
	string sessionID = String.Empty;
	string redirectUrl = "http://localhost:5095/weather";
	// string redirectUrl = "http://localhost:5095/weather";

	[SupplyParameterFromForm]
    public IFormCollection? formData { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var token = httpContextAccessor.HttpContext.Request.Cookies["sharkCookie"];

		Console.WriteLine("========================================================================");
		Console.WriteLine($"Shark Cookie: {token}");
		Console.WriteLine($"Is Cookie Null? {String.IsNullOrEmpty(token)}");

		var headers = httpContextAccessor.HttpContext.Request.Headers;

		foreach (var header in headers)
		{
			Console.WriteLine($"Header Key: {header.Key}");
			Console.WriteLine($"Header Value: {header.Value}");
		}

		var clientIPAddress = httpContextAccessor.HttpContext.Connection.RemoteIpAddress;

		Console.WriteLine($"Client IP Address: {clientIPAddress}");

		// var data = PostFormService.Form?["data"];
		// Console.WriteLine($"Post Form Data: {data}");

		if (String.IsNullOrEmpty(token))
		{
			Console.WriteLine("Creating Shark Cookie");
			sessionID = Guid.NewGuid().ToString();
			CookieOptions options = new CookieOptions();
			// options.Expires = DateTime.Now.AddDays(1);
			// options.Path = "/";
			// options.Domain = "*";
			// options.HttpOnly = false;
			// options.SameSite = SameSiteMode.None;
			// options.Secure = true;
			// options.MaxAge = null;
			httpContextAccessor.HttpContext.Response.Cookies.Append("sharkCookie", sessionID, options);

			// set for redirect to SSO authority
			ValidateLogin();

		}
		else if (HttpMethods.IsPost(httpContextAccessor.HttpContext.Request.Method))
		{
			Console.WriteLine("========================================================================");
			Console.WriteLine("POST SAML RESPONSE");

			var postHeaders = httpContextAccessor.HttpContext.Request.Headers;

			foreach (var header in postHeaders)
			{
				Console.WriteLine($"Header Key: {header.Key}");
				Console.WriteLine($"Header Value: {header.Value}");
			}

			var forms = httpContextAccessor.HttpContext.Request.Form;

			Console.WriteLine($"Form Count: {forms.Count}");

			foreach (var form in forms)
			{
				Console.WriteLine($"Form Key: {form.Key}");
				Console.WriteLine($"Form Value: {form.Value}");
			}

			// catch SAML Response
			/*try
			{
			var bodyContent = GetRequestBody(httpContextAccessor.HttpContext.Request);
			Console.WriteLine($"Post Body Content: {bodyContent}");
			}
			catch (Exception ex)
			{
			// Console.WriteLine(ex.Message);
			}*/

			Console.WriteLine("========================================================================");
		}
		else
		{
			// hasSharkCookie = true;
			sessionID = token;
			ValidateLogin();
		}
	}

	public static string GetRequestBody(HttpRequest request)
	{
		var bodyStream = new StreamReader(request.Body);
		bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
		var bodyText = bodyStream.ReadToEnd();
		return bodyText;
	}

	public void ValidateLogin()
	{
		// var content = new StringContent(JsonSerializer.Serialize(), Encoding.UTF8, "application/json");

		var requestMessage = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5095/api/validateCredentials");

		requestMessage.Headers.Add("SessionID", sessionID);
		// requestMessage.Content = content;
		var response = client.SendAsync(requestMessage).Result;

		if (response.IsSuccessStatusCode)
		{
			// yay, you're session is valid
			hasSharkCookie = true;
		}
		else
		{
			// you need to log in
			var SamlUrlRequestMessage = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5095/api/samlRequestURL");

			var samlUrlResponse = client.SendAsync(SamlUrlRequestMessage).Result;

			if (samlUrlResponse.IsSuccessStatusCode)
			{
				redirectUrl = samlUrlResponse.Content.ReadAsStringAsync().Result;
				Console.WriteLine($"Redirect Url: {redirectUrl}");
			}
			else
			{
				// oops
			}
		}
	}
}
